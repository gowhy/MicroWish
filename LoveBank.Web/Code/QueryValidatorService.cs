//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// 此源代码由 wsdl 自动生成, Version=4.0.30319.1。
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name = "QueryValidatorServicesSoapBinding", Namespace = "http://app.service.validator.businesses.gboss.id5.cn")]
public partial class QueryValidatorService : System.Web.Services.Protocols.SoapHttpClientProtocol
{

    private System.Threading.SendOrPostCallback querySingleOperationCompleted;

    private System.Threading.SendOrPostCallback queryBatchOperationCompleted;

    /// <remarks/>
    public QueryValidatorService()
    {
        this.Url = "http://gboss.id5.cn/services/QueryValidatorServices";
    }

    /// <remarks/>
    public event querySingleCompletedEventHandler querySingleCompleted;

    /// <remarks/>
    public event queryBatchCompletedEventHandler queryBatchCompleted;

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://app.service.validator.businesses.gboss.id5.cn", ResponseNamespace = "http://app.service.validator.businesses.gboss.id5.cn", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("querySingleReturn")]
    public string querySingle(string userName_, string password_, string type_, string param_)
    {
        object[] results = this.Invoke("querySingle", new object[] {
                    userName_,
                    password_,
                    type_,
                    param_});
        return ((string)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginquerySingle(string userName_, string password_, string type_, string param_, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("querySingle", new object[] {
                    userName_,
                    password_,
                    type_,
                    param_}, callback, asyncState);
    }

    /// <remarks/>
    public string EndquerySingle(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }

    /// <remarks/>
    public void querySingleAsync(string userName_, string password_, string type_, string param_)
    {
        this.querySingleAsync(userName_, password_, type_, param_, null);
    }

    /// <remarks/>
    public void querySingleAsync(string userName_, string password_, string type_, string param_, object userState)
    {
        if ((this.querySingleOperationCompleted == null))
        {
            this.querySingleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnquerySingleOperationCompleted);
        }
        this.InvokeAsync("querySingle", new object[] {
                    userName_,
                    password_,
                    type_,
                    param_}, this.querySingleOperationCompleted, userState);
    }

    private void OnquerySingleOperationCompleted(object arg)
    {
        if ((this.querySingleCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.querySingleCompleted(this, new querySingleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://app.service.validator.businesses.gboss.id5.cn", ResponseNamespace = "http://app.service.validator.businesses.gboss.id5.cn", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    [return: System.Xml.Serialization.XmlElementAttribute("queryBatchReturn")]
    public string queryBatch(string userName_, string password_, string type_, string param_)
    {
        object[] results = this.Invoke("queryBatch", new object[] {
                    userName_,
                    password_,
                    type_,
                    param_});
        return ((string)(results[0]));
    }

    /// <remarks/>
    public System.IAsyncResult BeginqueryBatch(string userName_, string password_, string type_, string param_, System.AsyncCallback callback, object asyncState)
    {
        return this.BeginInvoke("queryBatch", new object[] {
                    userName_,
                    password_,
                    type_,
                    param_}, callback, asyncState);
    }

    /// <remarks/>
    public string EndqueryBatch(System.IAsyncResult asyncResult)
    {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }

    /// <remarks/>
    public void queryBatchAsync(string userName_, string password_, string type_, string param_)
    {
        this.queryBatchAsync(userName_, password_, type_, param_, null);
    }

    /// <remarks/>
    public void queryBatchAsync(string userName_, string password_, string type_, string param_, object userState)
    {
        if ((this.queryBatchOperationCompleted == null))
        {
            this.queryBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnqueryBatchOperationCompleted);
        }
        this.InvokeAsync("queryBatch", new object[] {
                    userName_,
                    password_,
                    type_,
                    param_}, this.queryBatchOperationCompleted, userState);
    }

    private void OnqueryBatchOperationCompleted(object arg)
    {
        if ((this.queryBatchCompleted != null))
        {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.queryBatchCompleted(this, new queryBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }

    /// <remarks/>
    public new void CancelAsync(object userState)
    {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void querySingleCompletedEventHandler(object sender, querySingleCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class querySingleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal querySingleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
        base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public string Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
public delegate void queryBatchCompletedEventHandler(object sender, queryBatchCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class queryBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{

    private object[] results;

    internal queryBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
        base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public string Result
    {
        get
        {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}
