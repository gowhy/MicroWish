<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LoveBank.Common.Fakes</name>
    </assembly>
    <members>
        <member name="T:Global.Fakes.ShimDes">
            <summary>Des 的填充码类型</summary>
        </member>
        <member name="M:Global.Fakes.ShimDes.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Global.Fakes.ShimDes.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Global.Fakes.ShimDes.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Global.Fakes.ShimDes.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Global.Fakes.ShimDes.DesDecryptStringString">
            <summary>设置 Des.DesDecrypt(String toDecryptString, String keyStr) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimDes.DesEncryptStringString">
            <summary>设置 Des.DesEncrypt(String toEncryptString, String keyStr) 的 填充码</summary>
        </member>
        <member name="P:Global.Fakes.ShimDes.StaticConstructor">
            <summary>设置 Des.Des() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Config.Fakes.ShimDefaultConfigManager">
            <summary>LoveBank.Common.Config.DefaultConfigManager 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Config.Fakes.ShimDefaultConfigManager.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Config.Fakes.ShimDefaultConfigManager.#ctor(LoveBank.Common.Config.DefaultConfigManager)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Config.Fakes.ShimDefaultConfigManager.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Config.Fakes.ShimDefaultConfigManager.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Config.Fakes.ShimDefaultConfigManager.LoadConfigOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>设置 DefaultConfigManager.LoadConfig() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Config.Fakes.ShimDefaultConfigManager.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Config.Fakes.ShimDefaultConfigManager.ConstructorIConfigProvider">
            <summary>设置 DefaultConfigManager.DefaultConfigManager(IConfigProvider provider) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Config.Fakes.ShimDefaultConfigManager.SaveConfigIConfig">
            <summary>设置 DefaultConfigManager.SaveConfig(IConfig config) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Config.Fakes.ShimDefaultConfigManager.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Config.Fakes.ShimDefaultConfigManager.AllInstances.LoadConfigOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LoveBank.Common.Config.DefaultConfigManager,``0})">
            <summary>设置 DefaultConfigManager.LoadConfig() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Config.Fakes.ShimDefaultConfigManager.AllInstances.SaveConfigIConfig">
            <summary>设置 DefaultConfigManager.SaveConfig(IConfig config) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Config.Fakes.StubDefaultConfigManager">
            <summary>LoveBank.Common.Config.DefaultConfigManager 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Config.Fakes.StubDefaultConfigManager.#ctor(LoveBank.Common.Config.IConfigProvider)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Config.Fakes.StubDefaultConfigManager.InitializeStub">
            <summary>初始化 type StubDefaultConfigManager 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Config.Fakes.StubDefaultConfigManager.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Config.Fakes.StubDefaultConfigManager.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Config.Fakes.StubDefaultConfigManager.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Config.Fakes.StubIConfig">
            <summary>LoveBank.Common.Config.IConfig 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Config.Fakes.StubIConfig.#ctor">
            <summary>初始化 type StubIConfig 的新实例</summary>
        </member>
        <member name="T:LoveBank.Common.Config.Fakes.StubIConfigProvider">
            <summary>LoveBank.Common.Config.IConfigProvider 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Config.Fakes.StubIConfigProvider.#ctor">
            <summary>初始化 type StubIConfigProvider 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Config.Fakes.StubIConfigProvider.GetStringType">
            <summary>设置 IConfigProvider.Get(String key, Type configType) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Config.Fakes.StubIConfigProvider.lbc::LoveBank#Common#Config#IConfigProvider#Get(System.String,System.Type)">
            <summary>设置 IConfigProvider.Get(String key, Type configType) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Config.Fakes.StubIConfigProvider.lbc::LoveBank#Common#Config#IConfigProvider#Save(System.String,LoveBank.Common.Config.IConfig)">
            <summary>设置 IConfigProvider.Save(String key, IConfig config) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Config.Fakes.StubIConfigProvider.SaveStringIConfig">
            <summary>设置 IConfigProvider.Save(String key, IConfig config) 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Data.Fakes.ShimBackingStore">
            <summary>LoveBank.Common.Data.BackingStore 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.ShimBackingStore.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.ShimBackingStore.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.ShimBackingStore.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Data.Fakes.ShimBackingStore.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Data.Fakes.ShimBackingStore.Get">
            <summary>设置 BackingStore.Get() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Data.Fakes.ShimBackingStore.StaticConstructor">
            <summary>设置 BackingStore.BackingStore() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Data.Fakes.ShimOrderByHelper">
            <summary>LoveBank.Common.Data.OrderByHelper 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.ShimOrderByHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.ShimOrderByHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.ShimOrderByHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.ShimOrderByHelper.GetMemberNameOf2ExpressionOfFuncOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String})">
            <summary>设置 OrderByHelper.GetMemberName(Expression`1&lt;Func`2&lt;!!0,!!1&gt;&gt; keySelector) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.ShimOrderByHelper.OrderByOf1IQueryableOfM0StringBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.IQueryable{``0},System.String,System.Boolean,System.Linq.IQueryable{``0}})">
            <summary>设置 OrderByHelper.OrderBy(IQueryable`1&lt;!!0&gt; source, String propertyName, Boolean ascending) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Data.Fakes.ShimOrderByHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:LoveBank.Common.Data.Fakes.StubIEntityable`1">
            <summary>LoveBank.Common.Data.IEntityable`1 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIEntityable`1.#ctor">
            <summary>初始化 type StubIEntityable 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIEntityable`1.Delete">
            <summary>设置 IEntityable`1.Delete() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIEntityable`1.IdGet">
            <summary>设置 IEntityable`1.get_Id() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIEntityable`1.IsValidate">
            <summary>设置 IEntityable`1.IsValidate() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIEntityable`1.lbc::LoveBank#Common#Data#IEntityable{TKey}#Delete">
            <summary>设置 IEntityable`1.Delete() 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIEntityable`1.lbc::LoveBank#Common#Data#IEntityable{TKey}#IsValidate">
            <summary>设置 IEntityable`1.IsValidate() 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIEntityable`1.lbc::LoveBank#Common#Data#IEntityable{TKey}#Save">
            <summary>设置 IEntityable`1.Save() 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIEntityable`1.lbc::LoveBank#Common#Data#IEntityable{TKey}#Update">
            <summary>设置 IEntityable`1.Update() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIEntityable`1.Save">
            <summary>设置 IEntityable`1.Save() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIEntityable`1.Update">
            <summary>设置 IEntityable`1.Update() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Data.Fakes.StubIEntityable`1.lbc::LoveBank#Common#Data#IEntityable{TKey}#Id">
            <summary>设置 IEntityable`1.get_Id() 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Data.Fakes.StubIRepository">
            <summary>LoveBank.Common.Data.IRepository 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository.#ctor">
            <summary>初始化 type StubIRepository 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIRepository.Count">
            <summary>设置 IRepository.Count() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIRepository.Dispose">
            <summary>设置 IDisposable.Dispose() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository.lbc::LoveBank#Common#Data#IRepository#Count">
            <summary>设置 IRepository.Count() 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository.lbc::LoveBank#Common#Data#IRepository#Submit">
            <summary>设置 IRepository.Submit() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIRepository.Submit">
            <summary>设置 IRepository.Submit() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository.global::System#IDisposable#Dispose">
            <summary>设置 IDisposable.Dispose() 的 存根</summary>
        </member>
        <member name="T:LoveBank.Common.Data.Fakes.StubIRepository`1">
            <summary>LoveBank.Common.Data.IRepository`1 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository`1.#ctor">
            <summary>初始化 type StubIRepository 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIRepository`1.All">
            <summary>设置 IRepository`1.All() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIRepository`1.ContainsExpressionOfFuncOfT0Boolean">
            <summary>设置 IRepository`1.Contains(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIRepository`1.Count">
            <summary>设置 IRepository.Count() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIRepository`1.CountExpressionOfFuncOfT0Boolean">
            <summary>设置 IRepository`1.Count(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIRepository`1.CreateT0">
            <summary>设置 IRepository`1.Create(!0 t) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIRepository`1.DeleteExpressionOfFuncOfT0Boolean">
            <summary>设置 IRepository`1.Delete(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIRepository`1.DeleteT0">
            <summary>设置 IRepository`1.Delete(!0 t) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIRepository`1.Dispose">
            <summary>设置 IDisposable.Dispose() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIRepository`1.FilterExpressionOfFuncOfT0Boolean">
            <summary>设置 IRepository`1.Filter(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository`1.FilterOf1ExpressionOfFuncOfT0M0ExpressionOfFuncOfT0BooleanInt32OutSortingOrdersInt32Int32``1(Microsoft.QualityTools.Testing.Fakes.Delegates.LoveBankCommonDelegates.Out2Func7{System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,LoveBank.Common.Data.SortingOrders,System.Int32,System.Int32,System.Linq.IQueryable{`0}})">
            <summary>设置 Filter(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; sortingSelector, Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; filter, Int32&amp; total, SortingOrders sortby, Int32 index, Int32 size) 的存根</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIRepository`1.FindExpressionOfFuncOfT0Boolean">
            <summary>设置 IRepository`1.Find(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIRepository`1.FindObjectArray">
            <summary>设置 IRepository`1.Find(Object[] keys) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository`1.lbc::LoveBank#Common#Data#IRepository#Count">
            <summary>设置 IRepository.Count() 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository`1.lbc::LoveBank#Common#Data#IRepository#Submit">
            <summary>设置 IRepository.Submit() 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository`1.lbc::LoveBank#Common#Data#IRepository{T}#All">
            <summary>设置 IRepository`1.All() 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository`1.lbc::LoveBank#Common#Data#IRepository{T}#Contains(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>设置 IRepository`1.Contains(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository`1.lbc::LoveBank#Common#Data#IRepository{T}#Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>设置 IRepository`1.Count(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository`1.lbc::LoveBank#Common#Data#IRepository{T}#Create(`0)">
            <summary>设置 IRepository`1.Create(!0 t) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository`1.lbc::LoveBank#Common#Data#IRepository{T}#Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>设置 IRepository`1.Delete(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository`1.lbc::LoveBank#Common#Data#IRepository{T}#Delete(`0)">
            <summary>设置 IRepository`1.Delete(!0 t) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository`1.lbc::LoveBank#Common#Data#IRepository{T}#Filter(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>设置 IRepository`1.Filter(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository`1.lbc::LoveBank#Common#Data#IRepository{T}#Filter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32@,LoveBank.Common.Data.SortingOrders,System.Int32,System.Int32)">
            <summary>设置 IRepository`1.Filter(Expression`1&lt;Func`2&lt;!0,!!0&gt;&gt; sortingSelector, Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; filter, Int32&amp; total, SortingOrders sortby, Int32 index, Int32 size) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository`1.lbc::LoveBank#Common#Data#IRepository{T}#Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>设置 IRepository`1.Find(Expression`1&lt;Func`2&lt;!0,Boolean&gt;&gt; predicate) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository`1.lbc::LoveBank#Common#Data#IRepository{T}#Find(System.Object[])">
            <summary>设置 IRepository`1.Find(Object[] keys) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository`1.lbc::LoveBank#Common#Data#IRepository{T}#Update(`0)">
            <summary>设置 IRepository`1.Update(!0 t) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIRepository`1.Submit">
            <summary>设置 IRepository.Submit() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIRepository`1.global::System#IDisposable#Dispose">
            <summary>设置 IDisposable.Dispose() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIRepository`1.UpdateT0">
            <summary>设置 IRepository`1.Update(!0 t) 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Data.Fakes.StubIUnitOfWork">
            <summary>LoveBank.Common.Data.IUnitOfWork 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIUnitOfWork.#ctor">
            <summary>初始化 type StubIUnitOfWork 的新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIUnitOfWork.AddOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,``0})">
            <summary>设置 Add(!!0 t) 的存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIUnitOfWork.DeleteOf1ExpressionOfFuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32})">
            <summary>设置 Delete(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate) 的存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIUnitOfWork.DeleteOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 Delete(!!0 t) 的存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIUnitOfWork.DeleteOf2M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1})">
            <summary>设置 Delete(!!1 key) 的存根</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIUnitOfWork.Dispose">
            <summary>设置 IDisposable.Dispose() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIUnitOfWork.GetByIDOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>设置 GetByID(Object id) 的存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIUnitOfWork.lbc::LoveBank#Common#Data#IUnitOfWork#Add``1(``0)">
            <summary>设置 IUnitOfWork.Add(!!0 t) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIUnitOfWork.lbc::LoveBank#Common#Data#IUnitOfWork#Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>设置 IUnitOfWork.Delete(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIUnitOfWork.lbc::LoveBank#Common#Data#IUnitOfWork#Delete``1(``0)">
            <summary>设置 IUnitOfWork.Delete(!!0 t) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIUnitOfWork.lbc::LoveBank#Common#Data#IUnitOfWork#Delete``2(``1)">
            <summary>设置 IUnitOfWork.Delete(!!1 key) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIUnitOfWork.lbc::LoveBank#Common#Data#IUnitOfWork#GetByID``1(System.Object)">
            <summary>设置 IUnitOfWork.GetByID(Object id) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIUnitOfWork.lbc::LoveBank#Common#Data#IUnitOfWork#SaveChanges">
            <summary>设置 IUnitOfWork.SaveChanges() 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIUnitOfWork.lbc::LoveBank#Common#Data#IUnitOfWork#Update``1(``0)">
            <summary>设置 IUnitOfWork.Update(!!0 t) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Data.Fakes.StubIUnitOfWork.SaveChanges">
            <summary>设置 IUnitOfWork.SaveChanges() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIUnitOfWork.global::System#IDisposable#Dispose">
            <summary>设置 IDisposable.Dispose() 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Data.Fakes.StubIUnitOfWork.UpdateOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 Update(!!0 t) 的存根</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimAwaitCommittedAttribute">
            <summary>LoveBank.Common.Events.AwaitCommittedAttribute 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimAwaitCommittedAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimAwaitCommittedAttribute.#ctor(LoveBank.Common.Events.AwaitCommittedAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimAwaitCommittedAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimAwaitCommittedAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimAwaitCommittedAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimAwaitCommittedAttribute.Constructor">
            <summary>设置 AwaitCommittedAttribute.AwaitCommittedAttribute() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimAwaitCommittedAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimDefaultEventDispatcher">
            <summary>LoveBank.Common.Events.DefaultEventDispatcher 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDefaultEventDispatcher.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDefaultEventDispatcher.#ctor(LoveBank.Common.Events.DefaultEventDispatcher)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDefaultEventDispatcher.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDefaultEventDispatcher.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDefaultEventDispatcher.Bind(LoveBank.Common.Events.IEventDispatcher)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventDispatcher.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventDispatcher.Constructor">
            <summary>设置 DefaultEventDispatcher.DefaultEventDispatcher() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventDispatcher.ConstructorIEventHandlerRegistry">
            <summary>设置 DefaultEventDispatcher.DefaultEventDispatcher(IEventHandlerRegistry handlerRegistry) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventDispatcher.ConstructorIEventHandlerRegistryIHandlerInvoker">
            <summary>设置 DefaultEventDispatcher.DefaultEventDispatcher(IEventHandlerRegistry handlerRegistry, IHandlerInvoker handlerInvoker) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventDispatcher.DispatchIDomainEventEventDispatchingContext">
            <summary>设置 DefaultEventDispatcher.Dispatch(IDomainEvent evnt, EventDispatchingContext context) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventDispatcher.HandlerInvokerGet">
            <summary>设置 DefaultEventDispatcher.get_HandlerInvoker() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventDispatcher.HandlerRegistryGet">
            <summary>设置 DefaultEventDispatcher.get_HandlerRegistry() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimDefaultEventDispatcher.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventDispatcher.AllInstances.DispatchIDomainEventEventDispatchingContext">
            <summary>设置 DefaultEventDispatcher.Dispatch(IDomainEvent evnt, EventDispatchingContext context) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventDispatcher.AllInstances.HandlerInvokerGet">
            <summary>设置 DefaultEventDispatcher.get_HandlerInvoker() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventDispatcher.AllInstances.HandlerRegistryGet">
            <summary>设置 DefaultEventDispatcher.get_HandlerRegistry() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry">
            <summary>LoveBank.Common.Events.DefaultEventHandlerRegistry 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.#ctor(LoveBank.Common.Events.DefaultEventHandlerRegistry)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.Bind(LoveBank.Common.Events.IEventHandlerRegistry)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.Clear">
            <summary>设置 DefaultEventHandlerRegistry.Clear() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.Constructor">
            <summary>设置 DefaultEventHandlerRegistry.DefaultEventHandlerRegistry() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.FindDirectHandlersType">
            <summary>设置 DefaultEventHandlerRegistry.FindDirectHandlers(Type eventType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.FindHandlerMethodsType">
            <summary>设置 DefaultEventHandlerRegistry.FindHandlerMethods(Type eventType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.RegisterHandlerType">
            <summary>设置 DefaultEventHandlerRegistry.RegisterHandler(Type handlerType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.RegisterHandlersAssembly">
            <summary>设置 DefaultEventHandlerRegistry.RegisterHandlers(Assembly assembly) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.RegisterHandlersIEnumerableOfType">
            <summary>设置 DefaultEventHandlerRegistry.RegisterHandlers(IEnumerable`1&lt;Type&gt; handlerTypes) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.RemoveHandlersType">
            <summary>设置 DefaultEventHandlerRegistry.RemoveHandlers(Type eventType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry._RegisterHandlerb__2MethodInfo">
            <summary>设置 DefaultEventHandlerRegistry.&lt;RegisterHandler&gt;b__2(MethodInfo m) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.AllInstances.Clear">
            <summary>设置 DefaultEventHandlerRegistry.Clear() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.AllInstances.FindDirectHandlersType">
            <summary>设置 DefaultEventHandlerRegistry.FindDirectHandlers(Type eventType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.AllInstances.FindHandlerMethodsType">
            <summary>设置 DefaultEventHandlerRegistry.FindHandlerMethods(Type eventType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.AllInstances.RegisterHandlerType">
            <summary>设置 DefaultEventHandlerRegistry.RegisterHandler(Type handlerType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.AllInstances.RegisterHandlersAssembly">
            <summary>设置 DefaultEventHandlerRegistry.RegisterHandlers(Assembly assembly) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.AllInstances.RegisterHandlersIEnumerableOfType">
            <summary>设置 DefaultEventHandlerRegistry.RegisterHandlers(IEnumerable`1&lt;Type&gt; handlerTypes) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultEventHandlerRegistry.AllInstances.RemoveHandlersType">
            <summary>设置 DefaultEventHandlerRegistry.RemoveHandlers(Type eventType) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimDefaultHandlerInvoker">
            <summary>LoveBank.Common.Events.DefaultHandlerInvoker 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDefaultHandlerInvoker.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDefaultHandlerInvoker.#ctor(LoveBank.Common.Events.DefaultHandlerInvoker)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDefaultHandlerInvoker.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDefaultHandlerInvoker.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDefaultHandlerInvoker.Bind(LoveBank.Common.Events.IHandlerInvoker)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultHandlerInvoker.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultHandlerInvoker.Constructor">
            <summary>设置 DefaultHandlerInvoker.DefaultHandlerInvoker() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultHandlerInvoker.CreateHandlerInstanceType">
            <summary>设置 DefaultHandlerInvoker.CreateHandlerInstance(Type handlerType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultHandlerInvoker.InvokeHandlerIDomainEventMethodInfo">
            <summary>设置 DefaultHandlerInvoker.InvokeHandler(IDomainEvent evnt, MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultHandlerInvoker.InvokeIDomainEventMethodInfoEventDispatchingContext">
            <summary>设置 DefaultHandlerInvoker.Invoke(IDomainEvent evnt, MethodInfo handlerMethod, EventDispatchingContext context) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimDefaultHandlerInvoker.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultHandlerInvoker.AllInstances.CreateHandlerInstanceType">
            <summary>设置 DefaultHandlerInvoker.CreateHandlerInstance(Type handlerType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultHandlerInvoker.AllInstances.InvokeHandlerIDomainEventMethodInfo">
            <summary>设置 DefaultHandlerInvoker.InvokeHandler(IDomainEvent evnt, MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDefaultHandlerInvoker.AllInstances.InvokeIDomainEventMethodInfoEventDispatchingContext">
            <summary>设置 DefaultHandlerInvoker.Invoke(IDomainEvent evnt, MethodInfo handlerMethod, EventDispatchingContext context) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimDomainEvent">
            <summary>LoveBank.Common.Events.DomainEvent 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDomainEvent.#ctor(LoveBank.Common.Events.DomainEvent)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDomainEvent.ApplyOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 DomainEvent.Apply(!!0 evnt) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDomainEvent.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDomainEvent.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimDomainEvent.Bind(LoveBank.Common.Events.IDomainEvent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDomainEvent.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDomainEvent.Constructor">
            <summary>设置 DomainEvent.DomainEvent() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDomainEvent.ConstructorDateTime">
            <summary>设置 DomainEvent.DomainEvent(DateTime timestamp) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDomainEvent.TimestampGet">
            <summary>设置 DomainEvent.get_Timestamp() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDomainEvent.TimestampSetDateTime">
            <summary>设置 DomainEvent.set_Timestamp(DateTime value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimDomainEvent.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDomainEvent.AllInstances.TimestampGet">
            <summary>设置 DomainEvent.get_Timestamp() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimDomainEvent.AllInstances.TimestampSetDateTime">
            <summary>设置 DomainEvent.set_Timestamp(DateTime value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimEventConfig">
            <summary>LoveBank.Common.Events.EventConfig 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimEventConfig.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimEventConfig.#ctor(LoveBank.Common.Events.EventConfig)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimEventConfig.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimEventConfig.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.ConfigureActionOfEventConfig">
            <summary>设置 EventConfig.Configure(Action`1&lt;EventConfig&gt; action) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.Constructor">
            <summary>设置 EventConfig.EventConfig() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.CreateUnitOfWork">
            <summary>设置 EventConfig.CreateUnitOfWork() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.EventDispatcherGet">
            <summary>设置 EventConfig.get_EventDispatcher() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.EventDispatcherSetIEventDispatcher">
            <summary>设置 EventConfig.set_EventDispatcher(IEventDispatcher value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.StaticConstructor">
            <summary>设置 EventConfig.EventConfig() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.UnitOfWorkFactoryGet">
            <summary>设置 EventConfig.get_UnitOfWorkFactory() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.UnitOfWorkFactorySetFuncOfIUnitOfWork">
            <summary>设置 EventConfig.set_UnitOfWorkFactory(Func`1&lt;IUnitOfWork&gt; value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.UsingDefaultEventDispatcherAssemblyArray">
            <summary>设置 EventConfig.UsingDefaultEventDispatcher(Assembly[] handlerAssemblies) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.UsingDefaultEventDispatcherIEnumerableOfAssembly">
            <summary>设置 EventConfig.UsingDefaultEventDispatcher(IEnumerable`1&lt;Assembly&gt; handlerAssemblies) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.UsingUnitOfWorkFactoryFuncOfIUnitOfWork">
            <summary>设置 EventConfig.UsingUnitOfWorkFactory(Func`1&lt;IUnitOfWork&gt; unitOfWorkFactory) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimEventConfig.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.AllInstances.CreateUnitOfWork">
            <summary>设置 EventConfig.CreateUnitOfWork() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.AllInstances.EventDispatcherGet">
            <summary>设置 EventConfig.get_EventDispatcher() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.AllInstances.EventDispatcherSetIEventDispatcher">
            <summary>设置 EventConfig.set_EventDispatcher(IEventDispatcher value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.AllInstances.UnitOfWorkFactoryGet">
            <summary>设置 EventConfig.get_UnitOfWorkFactory() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.AllInstances.UnitOfWorkFactorySetFuncOfIUnitOfWork">
            <summary>设置 EventConfig.set_UnitOfWorkFactory(Func`1&lt;IUnitOfWork&gt; value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.AllInstances.UsingDefaultEventDispatcherAssemblyArray">
            <summary>设置 EventConfig.UsingDefaultEventDispatcher(Assembly[] handlerAssemblies) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.AllInstances.UsingDefaultEventDispatcherIEnumerableOfAssembly">
            <summary>设置 EventConfig.UsingDefaultEventDispatcher(IEnumerable`1&lt;Assembly&gt; handlerAssemblies) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventConfig.AllInstances.UsingUnitOfWorkFactoryFuncOfIUnitOfWork">
            <summary>设置 EventConfig.UsingUnitOfWorkFactory(Func`1&lt;IUnitOfWork&gt; unitOfWorkFactory) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimEventDispatchingContext">
            <summary>LoveBank.Common.Events.EventDispatchingContext 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimEventDispatchingContext.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimEventDispatchingContext.#ctor(LoveBank.Common.Events.EventDispatchingContext)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimEventDispatchingContext.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimEventDispatchingContext.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventDispatchingContext.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventDispatchingContext.ConstructorIUnitOfWorkBoolean">
            <summary>设置 EventDispatchingContext.EventDispatchingContext(IUnitOfWork unitOfWork, Boolean wasUnitOfWorkCommitted) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventDispatchingContext.UnitOfWorkGet">
            <summary>设置 EventDispatchingContext.get_UnitOfWork() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventDispatchingContext.UnitOfWorkSetIUnitOfWork">
            <summary>设置 EventDispatchingContext.set_UnitOfWork(IUnitOfWork value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventDispatchingContext.WasUnitOfWorkCommittedGet">
            <summary>设置 EventDispatchingContext.get_WasUnitOfWorkCommitted() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventDispatchingContext.WasUnitOfWorkCommittedSetBoolean">
            <summary>设置 EventDispatchingContext.set_WasUnitOfWorkCommitted(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimEventDispatchingContext.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventDispatchingContext.AllInstances.UnitOfWorkGet">
            <summary>设置 EventDispatchingContext.get_UnitOfWork() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventDispatchingContext.AllInstances.UnitOfWorkSetIUnitOfWork">
            <summary>设置 EventDispatchingContext.set_UnitOfWork(IUnitOfWork value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventDispatchingContext.AllInstances.WasUnitOfWorkCommittedGet">
            <summary>设置 EventDispatchingContext.get_WasUnitOfWorkCommitted() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventDispatchingContext.AllInstances.WasUnitOfWorkCommittedSetBoolean">
            <summary>设置 EventDispatchingContext.set_WasUnitOfWorkCommitted(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimEventHandlerException">
            <summary>LoveBank.Common.Events.EventHandlerException 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimEventHandlerException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimEventHandlerException.#ctor(LoveBank.Common.Events.EventHandlerException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimEventHandlerException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimEventHandlerException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimEventHandlerException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventHandlerException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventHandlerException.Constructor">
            <summary>设置 EventHandlerException.EventHandlerException() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventHandlerException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 EventHandlerException.EventHandlerException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventHandlerException.ConstructorString">
            <summary>设置 EventHandlerException.EventHandlerException(String message) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimEventHandlerException.ConstructorStringException">
            <summary>设置 EventHandlerException.EventHandlerException(String message, Exception inner) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimEventHandlerException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimHandleAsyncAttribute">
            <summary>LoveBank.Common.Events.HandleAsyncAttribute 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimHandleAsyncAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimHandleAsyncAttribute.#ctor(LoveBank.Common.Events.HandleAsyncAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimHandleAsyncAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimHandleAsyncAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimHandleAsyncAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimHandleAsyncAttribute.Constructor">
            <summary>设置 HandleAsyncAttribute.HandleAsyncAttribute() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimHandleAsyncAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent">
            <summary>LoveBank.Common.Events.UnitOfWorkForEvent 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.#ctor(LoveBank.Common.Events.UnitOfWorkForEvent)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.ApplyEventOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 UnitOfWorkForEvent.ApplyEvent(!!0 evnt) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.Bind(LoveBank.Common.Data.IUnitOfWork)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.Constructor">
            <summary>设置 UnitOfWorkForEvent.UnitOfWorkForEvent() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.ConstructorIEventDispatcher">
            <summary>设置 UnitOfWorkForEvent.UnitOfWorkForEvent(IEventDispatcher eventDispatcher) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.DispatchPostCommitEventsIEnumerableOfIDomainEvent">
            <summary>设置 UnitOfWorkForEvent.DispatchPostCommitEvents(IEnumerable`1&lt;IDomainEvent&gt; events) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.Dispose">
            <summary>设置 UnitOfWorkForEvent.Dispose() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.DisposeBoolean">
            <summary>设置 UnitOfWorkForEvent.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.EventDispatcherGet">
            <summary>设置 UnitOfWorkForEvent.get_EventDispatcher() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.EventDispatcherSetIEventDispatcher">
            <summary>设置 UnitOfWorkForEvent.set_EventDispatcher(IEventDispatcher value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.SaveChanges">
            <summary>设置 UnitOfWorkForEvent.SaveChanges() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.UncommittedEventsGet">
            <summary>设置 UnitOfWorkForEvent.get_UncommittedEvents() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.UncommittedEventsSetIListOfIDomainEvent">
            <summary>设置 UnitOfWorkForEvent.set_UncommittedEvents(IList`1&lt;IDomainEvent&gt; value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.AllInstances.ApplyEventOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{LoveBank.Common.Events.UnitOfWorkForEvent,``0})">
            <summary>设置 UnitOfWorkForEvent.ApplyEvent(!!0 evnt) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.AllInstances.DispatchPostCommitEventsIEnumerableOfIDomainEvent">
            <summary>设置 UnitOfWorkForEvent.DispatchPostCommitEvents(IEnumerable`1&lt;IDomainEvent&gt; events) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.AllInstances.Dispose">
            <summary>设置 UnitOfWorkForEvent.Dispose() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.AllInstances.DisposeBoolean">
            <summary>设置 UnitOfWorkForEvent.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.AllInstances.EventDispatcherGet">
            <summary>设置 UnitOfWorkForEvent.get_EventDispatcher() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.AllInstances.EventDispatcherSetIEventDispatcher">
            <summary>设置 UnitOfWorkForEvent.set_EventDispatcher(IEventDispatcher value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.AllInstances.SaveChanges">
            <summary>设置 UnitOfWorkForEvent.SaveChanges() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.AllInstances.UncommittedEventsGet">
            <summary>设置 UnitOfWorkForEvent.get_UncommittedEvents() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.ShimUnitOfWorkForEvent.AllInstances.UncommittedEventsSetIListOfIDomainEvent">
            <summary>设置 UnitOfWorkForEvent.set_UncommittedEvents(IList`1&lt;IDomainEvent&gt; value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.StubAwaitCommittedAttribute">
            <summary>LoveBank.Common.Events.AwaitCommittedAttribute 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubAwaitCommittedAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubAwaitCommittedAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubAwaitCommittedAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubAwaitCommittedAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubAwaitCommittedAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubAwaitCommittedAttribute.InitializeStub">
            <summary>初始化 type StubAwaitCommittedAttribute 的新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubAwaitCommittedAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubAwaitCommittedAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubAwaitCommittedAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubAwaitCommittedAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubAwaitCommittedAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubAwaitCommittedAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubAwaitCommittedAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubAwaitCommittedAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubAwaitCommittedAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.StubDefaultEventDispatcher">
            <summary>LoveBank.Common.Events.DefaultEventDispatcher 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubDefaultEventDispatcher.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubDefaultEventDispatcher.#ctor(LoveBank.Common.Events.IEventHandlerRegistry)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubDefaultEventDispatcher.#ctor(LoveBank.Common.Events.IEventHandlerRegistry,LoveBank.Common.Events.IHandlerInvoker)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubDefaultEventDispatcher.InitializeStub">
            <summary>初始化 type StubDefaultEventDispatcher 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubDefaultEventDispatcher.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubDefaultEventDispatcher.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubDefaultEventDispatcher.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.StubDefaultEventHandlerRegistry">
            <summary>LoveBank.Common.Events.DefaultEventHandlerRegistry 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubDefaultEventHandlerRegistry.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubDefaultEventHandlerRegistry.InitializeStub">
            <summary>初始化 type StubDefaultEventHandlerRegistry 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubDefaultEventHandlerRegistry.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubDefaultEventHandlerRegistry.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubDefaultEventHandlerRegistry.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.StubDefaultHandlerInvoker">
            <summary>LoveBank.Common.Events.DefaultHandlerInvoker 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubDefaultHandlerInvoker.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubDefaultHandlerInvoker.InitializeStub">
            <summary>初始化 type StubDefaultHandlerInvoker 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubDefaultHandlerInvoker.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubDefaultHandlerInvoker.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubDefaultHandlerInvoker.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.StubDomainEvent">
            <summary>LoveBank.Common.Events.DomainEvent 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubDomainEvent.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubDomainEvent.#ctor(System.DateTime)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubDomainEvent.InitializeStub">
            <summary>初始化 type StubDomainEvent 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubDomainEvent.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubDomainEvent.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubDomainEvent.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.StubEventDispatchingContext">
            <summary>LoveBank.Common.Events.EventDispatchingContext 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubEventDispatchingContext.#ctor(LoveBank.Common.Data.IUnitOfWork,System.Boolean)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubEventDispatchingContext.InitializeStub">
            <summary>初始化 type StubEventDispatchingContext 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubEventDispatchingContext.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubEventDispatchingContext.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubEventDispatchingContext.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.StubEventHandlerException">
            <summary>LoveBank.Common.Events.EventHandlerException 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubEventHandlerException.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubEventHandlerException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubEventHandlerException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubEventHandlerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubEventHandlerException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubEventHandlerException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubEventHandlerException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubEventHandlerException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubEventHandlerException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubEventHandlerException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubEventHandlerException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubEventHandlerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubEventHandlerException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubEventHandlerException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubEventHandlerException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubEventHandlerException.InitializeStub">
            <summary>初始化 type StubEventHandlerException 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubEventHandlerException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubEventHandlerException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubEventHandlerException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubEventHandlerException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubEventHandlerException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubEventHandlerException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubEventHandlerException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubEventHandlerException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubEventHandlerException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubEventHandlerException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubEventHandlerException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubEventHandlerException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubEventHandlerException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubEventHandlerException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.StubHandleAsyncAttribute">
            <summary>LoveBank.Common.Events.HandleAsyncAttribute 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubHandleAsyncAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubHandleAsyncAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubHandleAsyncAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubHandleAsyncAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubHandleAsyncAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubHandleAsyncAttribute.InitializeStub">
            <summary>初始化 type StubHandleAsyncAttribute 的新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubHandleAsyncAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubHandleAsyncAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubHandleAsyncAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubHandleAsyncAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubHandleAsyncAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubHandleAsyncAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubHandleAsyncAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubHandleAsyncAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubHandleAsyncAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.StubIDomainEvent">
            <summary>LoveBank.Common.Events.IDomainEvent 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubIDomainEvent.#ctor">
            <summary>初始化 type StubIDomainEvent 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubIDomainEvent.TimestampGet">
            <summary>设置 IDomainEvent.get_Timestamp() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubIDomainEvent.lbc::LoveBank#Common#Events#IDomainEvent#Timestamp">
            <summary>设置 IDomainEvent.get_Timestamp() 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.StubIEventDispatcher">
            <summary>LoveBank.Common.Events.IEventDispatcher 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubIEventDispatcher.#ctor">
            <summary>初始化 type StubIEventDispatcher 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubIEventDispatcher.DispatchIDomainEventEventDispatchingContext">
            <summary>设置 IEventDispatcher.Dispatch(IDomainEvent evnt, EventDispatchingContext context) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubIEventDispatcher.lbc::LoveBank#Common#Events#IEventDispatcher#Dispatch(LoveBank.Common.Events.IDomainEvent,LoveBank.Common.Events.EventDispatchingContext)">
            <summary>设置 IEventDispatcher.Dispatch(IDomainEvent evnt, EventDispatchingContext context) 的 存根</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.StubIEventHandlerRegistry">
            <summary>LoveBank.Common.Events.IEventHandlerRegistry 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubIEventHandlerRegistry.#ctor">
            <summary>初始化 type StubIEventHandlerRegistry 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubIEventHandlerRegistry.Clear">
            <summary>设置 IEventHandlerRegistry.Clear() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubIEventHandlerRegistry.FindHandlerMethodsType">
            <summary>设置 IEventHandlerRegistry.FindHandlerMethods(Type eventType) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubIEventHandlerRegistry.lbc::LoveBank#Common#Events#IEventHandlerRegistry#Clear">
            <summary>设置 IEventHandlerRegistry.Clear() 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubIEventHandlerRegistry.lbc::LoveBank#Common#Events#IEventHandlerRegistry#FindHandlerMethods(System.Type)">
            <summary>设置 IEventHandlerRegistry.FindHandlerMethods(Type eventType) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubIEventHandlerRegistry.lbc::LoveBank#Common#Events#IEventHandlerRegistry#RegisterHandler(System.Type)">
            <summary>设置 IEventHandlerRegistry.RegisterHandler(Type handlerType) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubIEventHandlerRegistry.lbc::LoveBank#Common#Events#IEventHandlerRegistry#RegisterHandlers(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>设置 IEventHandlerRegistry.RegisterHandlers(IEnumerable`1&lt;Type&gt; handlerTypes) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubIEventHandlerRegistry.lbc::LoveBank#Common#Events#IEventHandlerRegistry#RegisterHandlers(System.Reflection.Assembly)">
            <summary>设置 IEventHandlerRegistry.RegisterHandlers(Assembly assembly) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubIEventHandlerRegistry.lbc::LoveBank#Common#Events#IEventHandlerRegistry#RemoveHandlers(System.Type)">
            <summary>设置 IEventHandlerRegistry.RemoveHandlers(Type eventType) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubIEventHandlerRegistry.RegisterHandlerType">
            <summary>设置 IEventHandlerRegistry.RegisterHandler(Type handlerType) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubIEventHandlerRegistry.RegisterHandlersAssembly">
            <summary>设置 IEventHandlerRegistry.RegisterHandlers(Assembly assembly) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubIEventHandlerRegistry.RegisterHandlersIEnumerableOfType">
            <summary>设置 IEventHandlerRegistry.RegisterHandlers(IEnumerable`1&lt;Type&gt; handlerTypes) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubIEventHandlerRegistry.RemoveHandlersType">
            <summary>设置 IEventHandlerRegistry.RemoveHandlers(Type eventType) 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.StubIHandle`1">
            <summary>LoveBank.Common.Events.IHandle`1 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubIHandle`1.#ctor">
            <summary>初始化 type StubIHandle 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubIHandle`1.HandleT0">
            <summary>设置 IHandle`1.Handle(!0 evnt) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubIHandle`1.lbc::LoveBank#Common#Events#IHandle{TEvent}#Handle(`0)">
            <summary>设置 IHandle`1.Handle(!0 evnt) 的 存根</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.StubIHandlerInvoker">
            <summary>LoveBank.Common.Events.IHandlerInvoker 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubIHandlerInvoker.#ctor">
            <summary>初始化 type StubIHandlerInvoker 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubIHandlerInvoker.InvokeIDomainEventMethodInfoEventDispatchingContext">
            <summary>设置 IHandlerInvoker.Invoke(IDomainEvent evnt, MethodInfo handlerMethod, EventDispatchingContext context) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubIHandlerInvoker.lbc::LoveBank#Common#Events#IHandlerInvoker#Invoke(LoveBank.Common.Events.IDomainEvent,System.Reflection.MethodInfo,LoveBank.Common.Events.EventDispatchingContext)">
            <summary>设置 IHandlerInvoker.Invoke(IDomainEvent evnt, MethodInfo handlerMethod, EventDispatchingContext context) 的 存根</summary>
        </member>
        <member name="T:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent">
            <summary>LoveBank.Common.Events.UnitOfWorkForEvent 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.#ctor(LoveBank.Common.Events.IEventDispatcher)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.Add``1(``0)">
            <summary>设置 UnitOfWorkForEvent.Add(!!0 t) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.AddOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,``0})">
            <summary>设置 Add(!!0 t) 的存根</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>设置 UnitOfWorkForEvent.Delete(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.Delete``1(``0)">
            <summary>设置 UnitOfWorkForEvent.Delete(!!0 t) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.Delete``2(``1)">
            <summary>设置 UnitOfWorkForEvent.Delete(!!1 key) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.DeleteOf1ExpressionOfFuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32})">
            <summary>设置 Delete(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; predicate) 的存根</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.DeleteOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 Delete(!!0 t) 的存根</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.DeleteOf2M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``1})">
            <summary>设置 Delete(!!1 key) 的存根</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.Dispose(System.Boolean)">
            <summary>设置 UnitOfWorkForEvent.Dispose(Boolean disposing) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.DisposeBoolean">
            <summary>设置 UnitOfWorkForEvent.Dispose(Boolean disposing) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.DoCommit">
            <summary>设置 UnitOfWorkForEvent.DoCommit() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.DoCommit01">
            <summary>设置 UnitOfWorkForEvent.DoCommit() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.GetByID``1(System.Object)">
            <summary>设置 UnitOfWorkForEvent.GetByID(Object id) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.GetByIDOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>设置 GetByID(Object id) 的存根</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.InitializeStub">
            <summary>初始化 type StubUnitOfWorkForEvent 的新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.SaveChanges">
            <summary>设置 UnitOfWorkForEvent.SaveChanges() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.SaveChanges01">
            <summary>设置 UnitOfWorkForEvent.SaveChanges() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.Update``1(``0)">
            <summary>设置 UnitOfWorkForEvent.Update(!!0 t) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.UpdateOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 Update(!!0 t) 的存根</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Events.Fakes.StubUnitOfWorkForEvent.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Extensions.Fakes.ShimImageFormatAndStuffix">
            <summary>LoveBank.Common.Extensions.ImageFormatAndStuffix 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Extensions.Fakes.ShimImageFormatAndStuffix.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Extensions.Fakes.ShimImageFormatAndStuffix.#ctor(LoveBank.Common.Extensions.ImageFormatAndStuffix)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Extensions.Fakes.ShimImageFormatAndStuffix.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Extensions.Fakes.ShimImageFormatAndStuffix.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Extensions.Fakes.ShimImageFormatAndStuffix.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Extensions.Fakes.ShimImageFormatAndStuffix.Constructor">
            <summary>设置 ImageFormatAndStuffix.ImageFormatAndStuffix() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Extensions.Fakes.ShimImageFormatAndStuffix.ItemGetString">
            <summary>设置 ImageFormatAndStuffix.get_Item(String stuffix) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Extensions.Fakes.ShimImageFormatAndStuffix.StaticConstructor">
            <summary>设置 ImageFormatAndStuffix.ImageFormatAndStuffix() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Extensions.Fakes.ShimImageFormatAndStuffix.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Extensions.Fakes.ShimImageFormatAndStuffix.AllInstances.ItemGetString">
            <summary>设置 ImageFormatAndStuffix.get_Item(String stuffix) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Extensions.Fakes.ShimImageFormatExtensions">
            <summary>LoveBank.Common.Extensions.ImageFormatExtensions 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Extensions.Fakes.ShimImageFormatExtensions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Extensions.Fakes.ShimImageFormatExtensions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Extensions.Fakes.ShimImageFormatExtensions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Extensions.Fakes.ShimImageFormatExtensions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Extensions.Fakes.ShimImageFormatExtensions.ToImageFormatString">
            <summary>设置 ImageFormatExtensions.ToImageFormat(String stuffix) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Extensions.Fakes.StubImageFormatAndStuffix">
            <summary>LoveBank.Common.Extensions.ImageFormatAndStuffix 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Extensions.Fakes.StubImageFormatAndStuffix.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Extensions.Fakes.StubImageFormatAndStuffix.InitializeStub">
            <summary>初始化 type StubImageFormatAndStuffix 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Extensions.Fakes.StubImageFormatAndStuffix.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Extensions.Fakes.StubImageFormatAndStuffix.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Extensions.Fakes.StubImageFormatAndStuffix.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimAutheTicketManager">
            <summary>LoveBank.Common.AutheTicketManager 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimAutheTicketManager.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimAutheTicketManager.#ctor(LoveBank.Common.AutheTicketManager)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimAutheTicketManager.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimAutheTicketManager.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimAutheTicketManager.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimAutheTicketManager.Constructor">
            <summary>设置 AutheTicketManager.AutheTicketManager() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimAutheTicketManager.CreateAppLoginUserTicketString">
            <summary>设置 AutheTicketManager.CreateAppLoginUserTicket(String userId) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimAutheTicketManager.CreateLoginUserTicketString">
            <summary>设置 AutheTicketManager.CreateLoginUserTicket(String userId) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimAutheTicketManager.Logout">
            <summary>设置 AutheTicketManager.Logout() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimAutheTicketManager.ValidateUserTicketStringObjectRef">
            <summary>设置 AutheTicketManager.ValidateUserTicket(String encryptTicket, Object&amp; userInfo) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimAutheTicketManager.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimBaseExcelHelper">
            <summary>LoveBank.Common.BaseExcelHelper 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimBaseExcelHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimBaseExcelHelper.#ctor(LoveBank.Common.BaseExcelHelper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimBaseExcelHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimBaseExcelHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBaseExcelHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBaseExcelHelper.ConstructorStringString">
            <summary>设置 BaseExcelHelper.BaseExcelHelper(String excelFileName, String tableName) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimBaseExcelHelper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimBasePagedList`1">
            <summary>LoveBank.Common.BasePagedList`1 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimBasePagedList`1.#ctor(LoveBank.Common.BasePagedList{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimBasePagedList`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimBasePagedList`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimBasePagedList`1.Bind(LoveBank.Common.IPagedList)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimBasePagedList`1.Bind(LoveBank.Common.IPagedList{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimBasePagedList`1.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimBasePagedList`1.Bind(System.Collections.Generic.IEnumerable{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.ConstructorInt32Int32Int32">
            <summary>设置 BasePagedList`1.BasePagedList`1(Int32 index, Int32 pageSize, Int32 totalItemCount) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.CountGet">
            <summary>设置 BasePagedList`1.get_Count() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.FirstIndexOnPageGet">
            <summary>设置 BasePagedList`1.get_FirstIndexOnPage() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.FirstItemOnPageGet">
            <summary>设置 BasePagedList`1.get_FirstItemOnPage() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.GetEnumerator">
            <summary>设置 BasePagedList`1.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.HasNextPageGet">
            <summary>设置 BasePagedList`1.get_HasNextPage() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.HasPreviousPageGet">
            <summary>设置 BasePagedList`1.get_HasPreviousPage() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.IsFirstPageGet">
            <summary>设置 BasePagedList`1.get_IsFirstPage() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.IsLastPageGet">
            <summary>设置 BasePagedList`1.get_IsLastPage() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.ItemGetInt32">
            <summary>设置 BasePagedList`1.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.LastIndexOnPageGet">
            <summary>设置 BasePagedList`1.get_LastIndexOnPage() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.LastItemOnPageGet">
            <summary>设置 BasePagedList`1.get_LastItemOnPage() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.PageCountGet">
            <summary>设置 BasePagedList`1.get_PageCount() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.PageCountSetInt32">
            <summary>设置 BasePagedList`1.set_PageCount(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.PageIndexGet">
            <summary>设置 BasePagedList`1.get_PageIndex() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.PageIndexSetInt32">
            <summary>设置 BasePagedList`1.set_PageIndex(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.PageNumberGet">
            <summary>设置 BasePagedList`1.get_PageNumber() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.PageSizeGet">
            <summary>设置 BasePagedList`1.get_PageSize() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.PageSizeSetInt32">
            <summary>设置 BasePagedList`1.set_PageSize(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.SystemCollectionsIEnumerableGetEnumerator">
            <summary>设置 BasePagedList`1.System.Collections.IEnumerable.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.TotalItemCountGet">
            <summary>设置 BasePagedList`1.get_TotalItemCount() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.TotalItemCountSetInt32">
            <summary>设置 BasePagedList`1.set_TotalItemCount(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.CountGet">
            <summary>设置 BasePagedList`1.get_Count() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.FirstIndexOnPageGet">
            <summary>设置 BasePagedList`1.get_FirstIndexOnPage() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.FirstItemOnPageGet">
            <summary>设置 BasePagedList`1.get_FirstItemOnPage() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.GetEnumerator">
            <summary>设置 BasePagedList`1.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.HasNextPageGet">
            <summary>设置 BasePagedList`1.get_HasNextPage() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.HasPreviousPageGet">
            <summary>设置 BasePagedList`1.get_HasPreviousPage() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.IsFirstPageGet">
            <summary>设置 BasePagedList`1.get_IsFirstPage() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.IsLastPageGet">
            <summary>设置 BasePagedList`1.get_IsLastPage() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.ItemGetInt32">
            <summary>设置 BasePagedList`1.get_Item(Int32 index) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.LastIndexOnPageGet">
            <summary>设置 BasePagedList`1.get_LastIndexOnPage() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.LastItemOnPageGet">
            <summary>设置 BasePagedList`1.get_LastItemOnPage() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.PageCountGet">
            <summary>设置 BasePagedList`1.get_PageCount() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.PageCountSetInt32">
            <summary>设置 BasePagedList`1.set_PageCount(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.PageIndexGet">
            <summary>设置 BasePagedList`1.get_PageIndex() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.PageIndexSetInt32">
            <summary>设置 BasePagedList`1.set_PageIndex(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.PageNumberGet">
            <summary>设置 BasePagedList`1.get_PageNumber() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.PageSizeGet">
            <summary>设置 BasePagedList`1.get_PageSize() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.PageSizeSetInt32">
            <summary>设置 BasePagedList`1.set_PageSize(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>设置 BasePagedList`1.System.Collections.IEnumerable.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.TotalItemCountGet">
            <summary>设置 BasePagedList`1.get_TotalItemCount() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimBasePagedList`1.AllInstances.TotalItemCountSetInt32">
            <summary>设置 BasePagedList`1.set_TotalItemCount(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimCheck">
            <summary>LoveBank.Common.Check 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimCheck.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimCheck.#ctor(LoveBank.Common.Check)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimCheck.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimCheck.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.Constructor">
            <summary>设置 Check.Check() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimCheck.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimCheck.ShimArgument">
            <summary>LoveBank.Common.Check+Argument 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimCheck.ShimArgument.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimCheck.ShimArgument.#ctor(LoveBank.Common.Check.Argument)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimCheck.ShimArgument.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimCheck.ShimArgument.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotEmptyOf1ICollectionOfM0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Collections.Generic.ICollection{``0},System.String})">
            <summary>设置 Argument.IsNotEmpty(ICollection`1&lt;!!0&gt; argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.Constructor">
            <summary>设置 Argument.Argument() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotEmptyGuidString">
            <summary>设置 Argument.IsNotEmpty(Guid argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotEmptyStringString">
            <summary>设置 Argument.IsNotEmpty(String argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotInFutureDateTimeString">
            <summary>设置 Argument.IsNotInFuture(DateTime argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotInPastDateTimeString">
            <summary>设置 Argument.IsNotInPast(DateTime argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotInvalidDateDateTimeString">
            <summary>设置 Argument.IsNotInvalidDate(DateTime argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotInvalidEmailStringString">
            <summary>设置 Argument.IsNotInvalidEmail(String argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotInvalidWebUrlStringString">
            <summary>设置 Argument.IsNotInvalidWebUrl(String argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotNegativeDecimalString">
            <summary>设置 Argument.IsNotNegative(Decimal argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotNegativeInt32String">
            <summary>设置 Argument.IsNotNegative(Int32 argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotNegativeInt64String">
            <summary>设置 Argument.IsNotNegative(Int64 argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotNegativeOrZeroDecimalString">
            <summary>设置 Argument.IsNotNegativeOrZero(Decimal argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotNegativeOrZeroInt32String">
            <summary>设置 Argument.IsNotNegativeOrZero(Int32 argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotNegativeOrZeroInt64String">
            <summary>设置 Argument.IsNotNegativeOrZero(Int64 argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotNegativeOrZeroSingleString">
            <summary>设置 Argument.IsNotNegativeOrZero(Single argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotNegativeOrZeroTimeSpanString">
            <summary>设置 Argument.IsNotNegativeOrZero(TimeSpan argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotNegativeSingleString">
            <summary>设置 Argument.IsNotNegative(Single argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotNegativeTimeSpanString">
            <summary>设置 Argument.IsNotNegative(TimeSpan argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotNullObjectString">
            <summary>设置 Argument.IsNotNull(Object argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotOutOfLengthStringInt32String">
            <summary>设置 Argument.IsNotOutOfLength(String argument, Int32 length, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCheck.ShimArgument.IsNotOutOfRangeInt32Int32Int32String">
            <summary>设置 Argument.IsNotOutOfRange(Int32 argument, Int32 min, Int32 max, String argumentName) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimCheck.ShimArgument.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimCollectionExtensions">
            <summary>LoveBank.Common.CollectionExtensions 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimCollectionExtensions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimCollectionExtensions.AddRangeOf1ICollectionOfM0IEnumerableOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0}})">
            <summary>设置 CollectionExtensions.AddRange(ICollection`1&lt;!!0&gt; instance, IEnumerable`1&lt;!!0&gt; collection) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimCollectionExtensions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimCollectionExtensions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimCollectionExtensions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimContainerAdapter">
            <summary>LoveBank.Common.ContainerAdapter 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimContainerAdapter.#ctor(LoveBank.Common.ContainerAdapter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimContainerAdapter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimContainerAdapter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimContainerAdapter.Bind(LoveBank.Common.IContainerAdapter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimContainerAdapter.Bind(LoveBank.Common.IServiceInjector)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimContainerAdapter.Bind(LoveBank.Common.IServiceRegister)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimContainerAdapter.Bind(LoveBank.Common.IServiceResolver)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimContainerAdapter.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimContainerAdapter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimContainerAdapter.Constructor">
            <summary>设置 ContainerAdapter.ContainerAdapter() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimContainerAdapter.Dispose">
            <summary>设置 ContainerAdapter.Dispose() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimContainerAdapter.DisposeBoolean">
            <summary>设置 ContainerAdapter.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimContainerAdapter.DisposeCore">
            <summary>设置 ContainerAdapter.DisposeCore() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimContainerAdapter.ResolveAllType">
            <summary>设置 ContainerAdapter.ResolveAll(Type serviceType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimContainerAdapter.ResolveType">
            <summary>设置 ContainerAdapter.Resolve(Type serviceType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimContainerAdapter.ResolveTypeString">
            <summary>设置 ContainerAdapter.Resolve(Type serviceType, String key) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimContainerAdapter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimContainerAdapter.AllInstances.Dispose">
            <summary>设置 ContainerAdapter.Dispose() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimContainerAdapter.AllInstances.DisposeBoolean">
            <summary>设置 ContainerAdapter.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimContainerAdapter.AllInstances.DisposeCore">
            <summary>设置 ContainerAdapter.DisposeCore() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimContainerAdapter.AllInstances.ResolveAllType">
            <summary>设置 ContainerAdapter.ResolveAll(Type serviceType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimContainerAdapter.AllInstances.ResolveType">
            <summary>设置 ContainerAdapter.Resolve(Type serviceType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimContainerAdapter.AllInstances.ResolveTypeString">
            <summary>设置 ContainerAdapter.Resolve(Type serviceType, String key) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimDatetimeExtensions">
            <summary>LoveBank.Common.DatetimeExtensions 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimDatetimeExtensions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimDatetimeExtensions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimDatetimeExtensions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimDatetimeExtensions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimDatetimeExtensions.ConvertDateTimeIntDateTime">
            <summary>设置 DatetimeExtensions.ConvertDateTimeInt(DateTime time) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimDatetimeExtensions.GetDayDateTime">
            <summary>设置 DatetimeExtensions.GetDay(DateTime target) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimDatetimeExtensions.GetDayEndDateTime">
            <summary>设置 DatetimeExtensions.GetDayEnd(DateTime target) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimDatetimeExtensions.GetDayStartDateTime">
            <summary>设置 DatetimeExtensions.GetDayStart(DateTime target) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimDatetimeExtensions.IsValidDateTime">
            <summary>设置 DatetimeExtensions.IsValid(DateTime target) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimDatetimeExtensions.RemainTimeDateTime">
            <summary>设置 DatetimeExtensions.RemainTime(DateTime target) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimDatetimeExtensions.StaticConstructor">
            <summary>设置 DatetimeExtensions.DatetimeExtensions() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimDictionaryExtensions">
            <summary>LoveBank.Common.DictionaryExtensions 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimDictionaryExtensions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimDictionaryExtensions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimDictionaryExtensions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimDictionaryExtensions.AddStyleAttributeIDictionaryOfStringObjectStringString">
            <summary>设置 DictionaryExtensions.AddStyleAttribute(IDictionary`2&lt;String,Object&gt; instance, String key, String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimDictionaryExtensions.AppendInValueIDictionaryOfStringObjectStringStringObject">
            <summary>设置 DictionaryExtensions.AppendInValue(IDictionary`2&lt;String,Object&gt; instance, String key, String separator, Object value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimDictionaryExtensions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimDictionaryExtensions.MergeIDictionaryOfStringObjectIDictionaryOfStringObject">
            <summary>设置 DictionaryExtensions.Merge(IDictionary`2&lt;String,Object&gt; instance, IDictionary`2&lt;String,Object&gt; from) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimDictionaryExtensions.MergeIDictionaryOfStringObjectIDictionaryOfStringObjectBoolean">
            <summary>设置 DictionaryExtensions.Merge(IDictionary`2&lt;String,Object&gt; instance, IDictionary`2&lt;String,Object&gt; from, Boolean replaceExisting) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimDictionaryExtensions.MergeIDictionaryOfStringObjectObject">
            <summary>设置 DictionaryExtensions.Merge(IDictionary`2&lt;String,Object&gt; instance, Object values) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimDictionaryExtensions.MergeIDictionaryOfStringObjectObjectBoolean">
            <summary>设置 DictionaryExtensions.Merge(IDictionary`2&lt;String,Object&gt; instance, Object values, Boolean replaceExisting) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimDictionaryExtensions.MergeIDictionaryOfStringObjectStringObjectBoolean">
            <summary>设置 DictionaryExtensions.Merge(IDictionary`2&lt;String,Object&gt; instance, String key, Object value, Boolean replaceExisting) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimDictionaryExtensions.PrependInValueIDictionaryOfStringObjectStringStringObject">
            <summary>设置 DictionaryExtensions.PrependInValue(IDictionary`2&lt;String,Object&gt; instance, String key, String separator, Object value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimDictionaryExtensions.ToAttributeStringIDictionaryOfStringObject">
            <summary>设置 DictionaryExtensions.ToAttributeString(IDictionary`2&lt;String,Object&gt; instance) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimEnumExtensions">
            <summary>LoveBank.Common.EnumExtensions 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimEnumExtensions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimEnumExtensions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimEnumExtensions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimEnumExtensions.EnumToListOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.List{LoveBank.Common.EnumExtensions.EnumKeyValuePair}})">
            <summary>设置 EnumExtensions.EnumToList() 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimEnumExtensions._EnumToListb__bOf1Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,LoveBank.Common.EnumExtensions.EnumKeyValuePair})">
            <summary>设置 EnumExtensions.&lt;EnumToList&gt;b__b(Int32 s) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumExtensions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumExtensions.GetEnumDescriptionObject">
            <summary>设置 EnumExtensions.GetEnumDescription(Object e) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumExtensions.ToDescriptionEnum">
            <summary>设置 EnumExtensions.ToDescription(Enum value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumExtensions.ToKeyValueParirEnum">
            <summary>设置 EnumExtensions.ToKeyValueParir(Enum e) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumExtensions.ToLocalizableEnum">
            <summary>设置 EnumExtensions.ToLocalizable(Enum value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumExtensions.ToLocalizableEnumType">
            <summary>设置 EnumExtensions.ToLocalizable(Enum value, Type language) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumExtensions.ToSelectItemEnum">
            <summary>设置 EnumExtensions.ToSelectItem(Enum e) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumExtensions._GetEnumDescriptionb__4FieldInfo">
            <summary>设置 EnumExtensions.&lt;GetEnumDescription&gt;b__4(FieldInfo f) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumExtensions._GetEnumDescriptionb__5FieldInfoAttribute">
            <summary>设置 EnumExtensions.&lt;GetEnumDescription&gt;b__5(FieldInfo f, Attribute attr) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumExtensions._ToKeyValueParirb__0Enum">
            <summary>设置 EnumExtensions.&lt;ToKeyValueParir&gt;b__0(Enum d) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimEnumExtensions.ShimEnumKeyValuePair">
            <summary>LoveBank.Common.EnumExtensions+EnumKeyValuePair 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimEnumExtensions.ShimEnumKeyValuePair.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimEnumExtensions.ShimEnumKeyValuePair.#ctor(LoveBank.Common.EnumExtensions.EnumKeyValuePair)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimEnumExtensions.ShimEnumKeyValuePair.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimEnumExtensions.ShimEnumKeyValuePair.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumExtensions.ShimEnumKeyValuePair.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumExtensions.ShimEnumKeyValuePair.Constructor">
            <summary>设置 EnumKeyValuePair.EnumKeyValuePair() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimEnumExtensions.ShimEnumKeyValuePair.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimEnumItemDescriptionAttribute">
            <summary>LoveBank.Common.EnumItemDescriptionAttribute 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimEnumItemDescriptionAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimEnumItemDescriptionAttribute.#ctor(LoveBank.Common.EnumItemDescriptionAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimEnumItemDescriptionAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimEnumItemDescriptionAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumItemDescriptionAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumItemDescriptionAttribute.ConstructorString">
            <summary>设置 EnumItemDescriptionAttribute.EnumItemDescriptionAttribute(String desc) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumItemDescriptionAttribute.DescriptionGet">
            <summary>设置 EnumItemDescriptionAttribute.get_Description() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumItemDescriptionAttribute.DescriptionSetString">
            <summary>设置 EnumItemDescriptionAttribute.set_Description(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumItemDescriptionAttribute.GetDisplayValueObjectType">
            <summary>设置 EnumItemDescriptionAttribute.GetDisplayValue(Object value, Type enumType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumItemDescriptionAttribute.GetDisplayValuesImpObjectType">
            <summary>设置 EnumItemDescriptionAttribute.GetDisplayValuesImp(Object value, Type enumType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumItemDescriptionAttribute.HasValueGet">
            <summary>设置 EnumItemDescriptionAttribute.get_HasValue() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumItemDescriptionAttribute.StaticConstructor">
            <summary>设置 EnumItemDescriptionAttribute.EnumItemDescriptionAttribute() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimEnumItemDescriptionAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumItemDescriptionAttribute.AllInstances.DescriptionGet">
            <summary>设置 EnumItemDescriptionAttribute.get_Description() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumItemDescriptionAttribute.AllInstances.DescriptionSetString">
            <summary>设置 EnumItemDescriptionAttribute.set_Description(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumItemDescriptionAttribute.AllInstances.HasValueGet">
            <summary>设置 EnumItemDescriptionAttribute.get_HasValue() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimEnumerableExtensions">
            <summary>LoveBank.Common.EnumerableExtensions 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimEnumerableExtensions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimEnumerableExtensions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimEnumerableExtensions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimEnumerableExtensions.EachOf1IEnumerableOfM0ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Collections.Generic.IEnumerable{``0},System.Action{``0}})">
            <summary>设置 EnumerableExtensions.Each(IEnumerable`1&lt;!!0&gt; instance, Action`1&lt;!!0&gt; action) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimEnumerableExtensions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimExcelHelper">
            <summary>LoveBank.Common.ExcelHelper 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimExcelHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimExcelHelper.#ctor(LoveBank.Common.ExcelHelper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimExcelHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimExcelHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimExcelHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimExcelHelper.ConstructorStringString">
            <summary>设置 ExcelHelper.ExcelHelper(String excelFileName, String tableName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimExcelHelper.DownloadExcelDataTableString">
            <summary>设置 ExcelHelper.DownloadExcel(DataTable dtData, String fileName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimExcelHelper.GetExcelTableColumns">
            <summary>设置 ExcelHelper.GetExcelTableColumns() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimExcelHelper.GetExcelTables">
            <summary>设置 ExcelHelper.GetExcelTables() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimExcelHelper.InputFromExcel">
            <summary>设置 ExcelHelper.InputFromExcel() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimExcelHelper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimExcelHelper.AllInstances.GetExcelTableColumns">
            <summary>设置 ExcelHelper.GetExcelTableColumns() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimExcelHelper.AllInstances.GetExcelTables">
            <summary>设置 ExcelHelper.GetExcelTables() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimExcelHelper.AllInstances.InputFromExcel">
            <summary>设置 ExcelHelper.InputFromExcel() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimFTPHelper">
            <summary>LoveBank.Common.FTPHelper 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimFTPHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimFTPHelper.#ctor(LoveBank.Common.FTPHelper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimFTPHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimFTPHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.ConstructorStringStringStringString">
            <summary>设置 FTPHelper.FTPHelper(String FtpServerIP, String dirFtpRemotePath, String FtpUserID, String FtpPassword) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.DeleteString">
            <summary>设置 FTPHelper.Delete(String fileName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.DownloadStringString">
            <summary>设置 FTPHelper.Download(String filePath, String fileName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.FileExistString">
            <summary>设置 FTPHelper.FileExist(String RemoteFileName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.FtpRemotePathGet">
            <summary>设置 FTPHelper.get_FtpRemotePath() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.FtpRemotePathSetString">
            <summary>设置 FTPHelper.set_FtpRemotePath(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.FtpServerGet">
            <summary>设置 FTPHelper.get_FtpServer() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.FtpServerSetString">
            <summary>设置 FTPHelper.set_FtpServer(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.FtpURIGet">
            <summary>设置 FTPHelper.get_FtpURI() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.FtpURISetString">
            <summary>设置 FTPHelper.set_FtpURI(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.GetAllListString">
            <summary>设置 FTPHelper.GetAllList(String url) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.GetFileListString">
            <summary>设置 FTPHelper.GetFileList(String url) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.GetFileSizeString">
            <summary>设置 FTPHelper.GetFileSize(String filename) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.GetFilesDetailList">
            <summary>设置 FTPHelper.GetFilesDetailList() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.GotoDirectoryStringBoolean">
            <summary>设置 FTPHelper.GotoDirectory(String DirectoryName, Boolean IsRoot) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.MakeDirString">
            <summary>设置 FTPHelper.MakeDir(String dirName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.MovieFileStringString">
            <summary>设置 FTPHelper.MovieFile(String currentFilename, String newDirectory) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.ReNameStringString">
            <summary>设置 FTPHelper.ReName(String currentFilename, String newFilename) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.UploadHttpPostedFileBaseString">
            <summary>设置 FTPHelper.Upload(HttpPostedFileBase file, String fileName) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimFTPHelper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.AllInstances.DeleteString">
            <summary>设置 FTPHelper.Delete(String fileName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.AllInstances.DownloadStringString">
            <summary>设置 FTPHelper.Download(String filePath, String fileName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.AllInstances.FileExistString">
            <summary>设置 FTPHelper.FileExist(String RemoteFileName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.AllInstances.FtpRemotePathGet">
            <summary>设置 FTPHelper.get_FtpRemotePath() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.AllInstances.FtpRemotePathSetString">
            <summary>设置 FTPHelper.set_FtpRemotePath(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.AllInstances.FtpServerGet">
            <summary>设置 FTPHelper.get_FtpServer() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.AllInstances.FtpServerSetString">
            <summary>设置 FTPHelper.set_FtpServer(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.AllInstances.FtpURIGet">
            <summary>设置 FTPHelper.get_FtpURI() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.AllInstances.FtpURISetString">
            <summary>设置 FTPHelper.set_FtpURI(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.AllInstances.GetAllListString">
            <summary>设置 FTPHelper.GetAllList(String url) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.AllInstances.GetFileListString">
            <summary>设置 FTPHelper.GetFileList(String url) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.AllInstances.GetFileSizeString">
            <summary>设置 FTPHelper.GetFileSize(String filename) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.AllInstances.GetFilesDetailList">
            <summary>设置 FTPHelper.GetFilesDetailList() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.AllInstances.GotoDirectoryStringBoolean">
            <summary>设置 FTPHelper.GotoDirectory(String DirectoryName, Boolean IsRoot) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.AllInstances.MakeDirString">
            <summary>设置 FTPHelper.MakeDir(String dirName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.AllInstances.MovieFileStringString">
            <summary>设置 FTPHelper.MovieFile(String currentFilename, String newDirectory) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.AllInstances.ReNameStringString">
            <summary>设置 FTPHelper.ReName(String currentFilename, String newFilename) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFTPHelper.AllInstances.UploadHttpPostedFileBaseString">
            <summary>设置 FTPHelper.Upload(HttpPostedFileBase file, String fileName) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimFileHelper">
            <summary>LoveBank.Common.FileHelper 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimFileHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimFileHelper.#ctor(LoveBank.Common.FileHelper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimFileHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimFileHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFileHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFileHelper.Constructor">
            <summary>设置 FileHelper.FileHelper() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFileHelper.DownloadStringString">
            <summary>设置 FileHelper.Download(String fileFullName, String downloadFileName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFileHelper.UploadHttpPostedFileBaseString">
            <summary>设置 FileHelper.Upload(HttpPostedFileBase myFile, String filePathFullName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFileHelper.UploadHttpPostedFileString">
            <summary>设置 FileHelper.Upload(HttpPostedFile myFile, String filePathFullName) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimFileHelper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimFileUploadService">
            <summary>LoveBank.Common.FileUploadService 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimFileUploadService.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimFileUploadService.#ctor(LoveBank.Common.FileUploadService)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimFileUploadService.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimFileUploadService.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimFileUploadService.Bind(LoveBank.Common.IFileUploadService)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFileUploadService.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFileUploadService.Constructor">
            <summary>设置 FileUploadService.FileUploadService() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFileUploadService.DeleteFileString">
            <summary>设置 FileUploadService.DeleteFile(String fullName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFileUploadService.FileDownloadHttpResponseBaseString">
            <summary>设置 FileUploadService.FileDownload(HttpResponseBase response, String filePah) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFileUploadService.IsExistsString">
            <summary>设置 FileUploadService.IsExists(String fullName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFileUploadService.UploadFileHttpPostedFileBaseString">
            <summary>设置 FileUploadService.UploadFile(HttpPostedFileBase postedFile, String savePath) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFileUploadService.UploadFileHttpPostedFileBaseStringBoolean">
            <summary>设置 FileUploadService.UploadFile(HttpPostedFileBase postedFile, String savePath, Boolean isReplace) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimFileUploadService.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFileUploadService.AllInstances.DeleteFileString">
            <summary>设置 FileUploadService.DeleteFile(String fullName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFileUploadService.AllInstances.FileDownloadHttpResponseBaseString">
            <summary>设置 FileUploadService.FileDownload(HttpResponseBase response, String filePah) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFileUploadService.AllInstances.IsExistsString">
            <summary>设置 FileUploadService.IsExists(String fullName) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFileUploadService.AllInstances.UploadFileHttpPostedFileBaseString">
            <summary>设置 FileUploadService.UploadFile(HttpPostedFileBase postedFile, String savePath) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimFileUploadService.AllInstances.UploadFileHttpPostedFileBaseStringBoolean">
            <summary>设置 FileUploadService.UploadFile(HttpPostedFileBase postedFile, String savePath, Boolean isReplace) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimGuidExtension">
            <summary>LoveBank.Common.GuidExtension 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimGuidExtension.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimGuidExtension.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimGuidExtension.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimGuidExtension.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimGuidExtension.IsEmptyGuid">
            <summary>设置 GuidExtension.IsEmpty(Guid target) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimGuidExtension.ShrinkGuid">
            <summary>设置 GuidExtension.Shrink(Guid target) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimHttpException">
            <summary>LoveBank.Common.HttpException 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpException.#ctor(LoveBank.Common.HttpException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpException.Constructor">
            <summary>设置 HttpException.HttpException() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpException.ConstructorStringInt32String">
            <summary>设置 HttpException.HttpException(String uri, Int32 errorCode, String message) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpException.ConstructorStringInt32StringException">
            <summary>设置 HttpException.HttpException(String uri, Int32 errorCode, String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpException.ConstructorStringString">
            <summary>设置 HttpException.HttpException(String uri, String message) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpException.ErrorCodeGet">
            <summary>设置 HttpException.get_ErrorCode() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpException.ErrorCodeSetInt32">
            <summary>设置 HttpException.set_ErrorCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpException.UriGet">
            <summary>设置 HttpException.get_Uri() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpException.UriSetString">
            <summary>设置 HttpException.set_Uri(String value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimHttpException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpException.AllInstances.ErrorCodeGet">
            <summary>设置 HttpException.get_ErrorCode() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpException.AllInstances.ErrorCodeSetInt32">
            <summary>设置 HttpException.set_ErrorCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpException.AllInstances.UriGet">
            <summary>设置 HttpException.get_Uri() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpException.AllInstances.UriSetString">
            <summary>设置 HttpException.set_Uri(String value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimHttpGet">
            <summary>LoveBank.Common.HttpGet 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpGet.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpGet.#ctor(LoveBank.Common.HttpGet)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpGet.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpGet.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpGet.Bind(LoveBank.Common.IHttpRequest)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpGet.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpGet.ConstructUri">
            <summary>设置 HttpGet.ConstructUri() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpGet.ConstructorString">
            <summary>设置 HttpGet.HttpGet(String uri) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpGet.ParamsGet">
            <summary>设置 HttpGet.get_Params() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimHttpGet.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpGet.AllInstances.ConstructUri">
            <summary>设置 HttpGet.ConstructUri() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpGet.AllInstances.ParamsGet">
            <summary>设置 HttpGet.get_Params() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimHttpHelper">
            <summary>LoveBank.Common.HttpHelper 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpHelper.#ctor(LoveBank.Common.HttpHelper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.CheckValidationResultObjectX509CertificateX509ChainSslPolicyErrors">
            <summary>设置 HttpHelper.CheckValidationResult(Object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors errors) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.Constructor">
            <summary>设置 HttpHelper.HttpHelper() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.GetHtmlHttpItem">
            <summary>设置 HttpHelper.GetHtml(HttpItem objhttpitem) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.GetMemoryStreamStream">
            <summary>设置 HttpHelper.GetMemoryStream(Stream streamResponse) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.SetCerHttpItem">
            <summary>设置 HttpHelper.SetCer(HttpItem objhttpItem) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.SetCerListHttpItem">
            <summary>设置 HttpHelper.SetCerList(HttpItem objhttpItem) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.SetCookieHttpItem">
            <summary>设置 HttpHelper.SetCookie(HttpItem objhttpItem) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.SetPostDataHttpItem">
            <summary>设置 HttpHelper.SetPostData(HttpItem objhttpItem) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.SetProxyHttpItem">
            <summary>设置 HttpHelper.SetProxy(HttpItem objhttpItem) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.SetRequestHttpItem">
            <summary>设置 HttpHelper.SetRequest(HttpItem objhttpItem) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.URLDecodeStringEncoding">
            <summary>设置 HttpHelper.URLDecode(String text, Encoding encoding) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.URLEncodeStringEncoding">
            <summary>设置 HttpHelper.URLEncode(String text, Encoding encoding) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimHttpHelper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.AllInstances.CheckValidationResultObjectX509CertificateX509ChainSslPolicyErrors">
            <summary>设置 HttpHelper.CheckValidationResult(Object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors errors) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.AllInstances.GetHtmlHttpItem">
            <summary>设置 HttpHelper.GetHtml(HttpItem objhttpitem) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.AllInstances.SetCerHttpItem">
            <summary>设置 HttpHelper.SetCer(HttpItem objhttpItem) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.AllInstances.SetCerListHttpItem">
            <summary>设置 HttpHelper.SetCerList(HttpItem objhttpItem) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.AllInstances.SetCookieHttpItem">
            <summary>设置 HttpHelper.SetCookie(HttpItem objhttpItem) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.AllInstances.SetPostDataHttpItem">
            <summary>设置 HttpHelper.SetPostData(HttpItem objhttpItem) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.AllInstances.SetProxyHttpItem">
            <summary>设置 HttpHelper.SetProxy(HttpItem objhttpItem) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.AllInstances.SetRequestHttpItem">
            <summary>设置 HttpHelper.SetRequest(HttpItem objhttpItem) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.AllInstances.URLDecodeStringEncoding">
            <summary>设置 HttpHelper.URLDecode(String text, Encoding encoding) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpHelper.AllInstances.URLEncodeStringEncoding">
            <summary>设置 HttpHelper.URLEncode(String text, Encoding encoding) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimHttpItem">
            <summary>LoveBank.Common.HttpItem 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpItem.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpItem.#ctor(LoveBank.Common.HttpItem)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpItem.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpItem.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AcceptGet">
            <summary>设置 HttpItem.get_Accept() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AcceptSetString">
            <summary>设置 HttpItem.set_Accept(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllowautoredirectGet">
            <summary>设置 HttpItem.get_Allowautoredirect() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllowautoredirectSetBoolean">
            <summary>设置 HttpItem.set_Allowautoredirect(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.CerPathGet">
            <summary>设置 HttpItem.get_CerPath() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.CerPathSetString">
            <summary>设置 HttpItem.set_CerPath(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.ClentCertificatesGet">
            <summary>设置 HttpItem.get_ClentCertificates() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.ClentCertificatesSetX509CertificateCollection">
            <summary>设置 HttpItem.set_ClentCertificates(X509CertificateCollection value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.ConnectionlimitGet">
            <summary>设置 HttpItem.get_Connectionlimit() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.ConnectionlimitSetInt32">
            <summary>设置 HttpItem.set_Connectionlimit(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.Constructor">
            <summary>设置 HttpItem.HttpItem() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.ContentTypeGet">
            <summary>设置 HttpItem.get_ContentType() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.ContentTypeSetString">
            <summary>设置 HttpItem.set_ContentType(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.CookieCollectionGet">
            <summary>设置 HttpItem.get_CookieCollection() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.CookieCollectionSetCookieCollection">
            <summary>设置 HttpItem.set_CookieCollection(CookieCollection value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.CookieGet">
            <summary>设置 HttpItem.get_Cookie() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.CookieSetString">
            <summary>设置 HttpItem.set_Cookie(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.EncodingGet">
            <summary>设置 HttpItem.get_Encoding() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.EncodingSetEncoding">
            <summary>设置 HttpItem.set_Encoding(Encoding value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.Expect100ContinueGet">
            <summary>设置 HttpItem.get_Expect100Continue() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.Expect100ContinueSetBoolean">
            <summary>设置 HttpItem.set_Expect100Continue(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.HeaderGet">
            <summary>设置 HttpItem.get_Header() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.HeaderSetWebHeaderCollection">
            <summary>设置 HttpItem.set_Header(WebHeaderCollection value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.IsToLowerGet">
            <summary>设置 HttpItem.get_IsToLower() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.IsToLowerSetBoolean">
            <summary>设置 HttpItem.set_IsToLower(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.MethodGet">
            <summary>设置 HttpItem.get_Method() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.MethodSetString">
            <summary>设置 HttpItem.set_Method(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.PostDataTypeGet">
            <summary>设置 HttpItem.get_PostDataType() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.PostDataTypeSetPostDataType">
            <summary>设置 HttpItem.set_PostDataType(PostDataType value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.PostEncodingGet">
            <summary>设置 HttpItem.get_PostEncoding() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.PostEncodingSetEncoding">
            <summary>设置 HttpItem.set_PostEncoding(Encoding value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.PostdataByteGet">
            <summary>设置 HttpItem.get_PostdataByte() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.PostdataByteSetByteArray">
            <summary>设置 HttpItem.set_PostdataByte(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.PostdataGet">
            <summary>设置 HttpItem.get_Postdata() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.PostdataSetString">
            <summary>设置 HttpItem.set_Postdata(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.ProtocolVersionGet">
            <summary>设置 HttpItem.get_ProtocolVersion() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.ProtocolVersionSetVersion">
            <summary>设置 HttpItem.set_ProtocolVersion(Version value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.ProxyIpGet">
            <summary>设置 HttpItem.get_ProxyIp() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.ProxyIpSetString">
            <summary>设置 HttpItem.set_ProxyIp(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.ProxyPwdGet">
            <summary>设置 HttpItem.get_ProxyPwd() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.ProxyPwdSetString">
            <summary>设置 HttpItem.set_ProxyPwd(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.ProxyUserNameGet">
            <summary>设置 HttpItem.get_ProxyUserName() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.ProxyUserNameSetString">
            <summary>设置 HttpItem.set_ProxyUserName(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.ReadWriteTimeoutGet">
            <summary>设置 HttpItem.get_ReadWriteTimeout() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.ReadWriteTimeoutSetInt32">
            <summary>设置 HttpItem.set_ReadWriteTimeout(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.RefererGet">
            <summary>设置 HttpItem.get_Referer() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.RefererSetString">
            <summary>设置 HttpItem.set_Referer(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.ResultTypeGet">
            <summary>设置 HttpItem.get_ResultType() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.ResultTypeSetResultType">
            <summary>设置 HttpItem.set_ResultType(ResultType value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.SecurityProtocolTypeGet">
            <summary>设置 HttpItem.get_SecurityProtocolType() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.SecurityProtocolTypeSetSecurityProtocolType">
            <summary>设置 HttpItem.set_SecurityProtocolType(SecurityProtocolType value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.TimeoutGet">
            <summary>设置 HttpItem.get_Timeout() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.TimeoutSetInt32">
            <summary>设置 HttpItem.set_Timeout(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.URLGet">
            <summary>设置 HttpItem.get_URL() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.URLSetString">
            <summary>设置 HttpItem.set_URL(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.UserAgentGet">
            <summary>设置 HttpItem.get_UserAgent() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.UserAgentSetString">
            <summary>设置 HttpItem.set_UserAgent(String value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimHttpItem.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.AcceptGet">
            <summary>设置 HttpItem.get_Accept() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.AcceptSetString">
            <summary>设置 HttpItem.set_Accept(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.AllowautoredirectGet">
            <summary>设置 HttpItem.get_Allowautoredirect() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.AllowautoredirectSetBoolean">
            <summary>设置 HttpItem.set_Allowautoredirect(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.CerPathGet">
            <summary>设置 HttpItem.get_CerPath() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.CerPathSetString">
            <summary>设置 HttpItem.set_CerPath(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.ClentCertificatesGet">
            <summary>设置 HttpItem.get_ClentCertificates() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.ClentCertificatesSetX509CertificateCollection">
            <summary>设置 HttpItem.set_ClentCertificates(X509CertificateCollection value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.ConnectionlimitGet">
            <summary>设置 HttpItem.get_Connectionlimit() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.ConnectionlimitSetInt32">
            <summary>设置 HttpItem.set_Connectionlimit(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.ContentTypeGet">
            <summary>设置 HttpItem.get_ContentType() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.ContentTypeSetString">
            <summary>设置 HttpItem.set_ContentType(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.CookieCollectionGet">
            <summary>设置 HttpItem.get_CookieCollection() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.CookieCollectionSetCookieCollection">
            <summary>设置 HttpItem.set_CookieCollection(CookieCollection value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.CookieGet">
            <summary>设置 HttpItem.get_Cookie() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.CookieSetString">
            <summary>设置 HttpItem.set_Cookie(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.EncodingGet">
            <summary>设置 HttpItem.get_Encoding() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.EncodingSetEncoding">
            <summary>设置 HttpItem.set_Encoding(Encoding value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.Expect100ContinueGet">
            <summary>设置 HttpItem.get_Expect100Continue() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.Expect100ContinueSetBoolean">
            <summary>设置 HttpItem.set_Expect100Continue(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.HeaderGet">
            <summary>设置 HttpItem.get_Header() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.HeaderSetWebHeaderCollection">
            <summary>设置 HttpItem.set_Header(WebHeaderCollection value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.IsToLowerGet">
            <summary>设置 HttpItem.get_IsToLower() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.IsToLowerSetBoolean">
            <summary>设置 HttpItem.set_IsToLower(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.MethodGet">
            <summary>设置 HttpItem.get_Method() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.MethodSetString">
            <summary>设置 HttpItem.set_Method(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.PostDataTypeGet">
            <summary>设置 HttpItem.get_PostDataType() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.PostDataTypeSetPostDataType">
            <summary>设置 HttpItem.set_PostDataType(PostDataType value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.PostEncodingGet">
            <summary>设置 HttpItem.get_PostEncoding() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.PostEncodingSetEncoding">
            <summary>设置 HttpItem.set_PostEncoding(Encoding value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.PostdataByteGet">
            <summary>设置 HttpItem.get_PostdataByte() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.PostdataByteSetByteArray">
            <summary>设置 HttpItem.set_PostdataByte(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.PostdataGet">
            <summary>设置 HttpItem.get_Postdata() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.PostdataSetString">
            <summary>设置 HttpItem.set_Postdata(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.ProtocolVersionGet">
            <summary>设置 HttpItem.get_ProtocolVersion() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.ProtocolVersionSetVersion">
            <summary>设置 HttpItem.set_ProtocolVersion(Version value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.ProxyIpGet">
            <summary>设置 HttpItem.get_ProxyIp() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.ProxyIpSetString">
            <summary>设置 HttpItem.set_ProxyIp(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.ProxyPwdGet">
            <summary>设置 HttpItem.get_ProxyPwd() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.ProxyPwdSetString">
            <summary>设置 HttpItem.set_ProxyPwd(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.ProxyUserNameGet">
            <summary>设置 HttpItem.get_ProxyUserName() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.ProxyUserNameSetString">
            <summary>设置 HttpItem.set_ProxyUserName(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.ReadWriteTimeoutGet">
            <summary>设置 HttpItem.get_ReadWriteTimeout() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.ReadWriteTimeoutSetInt32">
            <summary>设置 HttpItem.set_ReadWriteTimeout(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.RefererGet">
            <summary>设置 HttpItem.get_Referer() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.RefererSetString">
            <summary>设置 HttpItem.set_Referer(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.ResultTypeGet">
            <summary>设置 HttpItem.get_ResultType() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.ResultTypeSetResultType">
            <summary>设置 HttpItem.set_ResultType(ResultType value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.SecurityProtocolTypeGet">
            <summary>设置 HttpItem.get_SecurityProtocolType() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.SecurityProtocolTypeSetSecurityProtocolType">
            <summary>设置 HttpItem.set_SecurityProtocolType(SecurityProtocolType value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.TimeoutGet">
            <summary>设置 HttpItem.get_Timeout() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.TimeoutSetInt32">
            <summary>设置 HttpItem.set_Timeout(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.URLGet">
            <summary>设置 HttpItem.get_URL() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.URLSetString">
            <summary>设置 HttpItem.set_URL(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.UserAgentGet">
            <summary>设置 HttpItem.get_UserAgent() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpItem.AllInstances.UserAgentSetString">
            <summary>设置 HttpItem.set_UserAgent(String value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimHttpPost">
            <summary>LoveBank.Common.HttpPost 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpPost.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpPost.#ctor(LoveBank.Common.HttpPost)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpPost.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpPost.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpPost.Bind(LoveBank.Common.IHttpRequest)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpPost.AppendHeadersWebHeaderCollection">
            <summary>设置 HttpPost.AppendHeaders(WebHeaderCollection headers) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpPost.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpPost.ConstructPostBodyIEnumerableOfParamPair">
            <summary>设置 HttpPost.ConstructPostBody(IEnumerable`1&lt;ParamPair&gt; parameters) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpPost.ConstructorString">
            <summary>设置 HttpPost.HttpPost(String uri) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpPost.ConstructorStringString">
            <summary>设置 HttpPost.HttpPost(String uri, String postData) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpPost.ParamsGet">
            <summary>设置 HttpPost.get_Params() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpPost.PostDataGet">
            <summary>设置 HttpPost.get_PostData() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpPost.PostDataSetString">
            <summary>设置 HttpPost.set_PostData(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpPost.PreparePostBodyIEnumerableOfParamPair">
            <summary>设置 HttpPost.PreparePostBody(IEnumerable`1&lt;ParamPair&gt; customPostParams) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpPost.WriteBodyStream">
            <summary>设置 HttpPost.WriteBody(Stream reqStream) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimHttpPost.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpPost.AllInstances.AppendHeadersWebHeaderCollection">
            <summary>设置 HttpPost.AppendHeaders(WebHeaderCollection headers) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpPost.AllInstances.ParamsGet">
            <summary>设置 HttpPost.get_Params() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpPost.AllInstances.PostDataGet">
            <summary>设置 HttpPost.get_PostData() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpPost.AllInstances.PostDataSetString">
            <summary>设置 HttpPost.set_PostData(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpPost.AllInstances.PreparePostBodyIEnumerableOfParamPair">
            <summary>设置 HttpPost.PreparePostBody(IEnumerable`1&lt;ParamPair&gt; customPostParams) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpPost.AllInstances.WriteBodyStream">
            <summary>设置 HttpPost.WriteBody(Stream reqStream) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimHttpRequest">
            <summary>LoveBank.Common.HttpRequest 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpRequest.#ctor(LoveBank.Common.HttpRequest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpRequest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpRequest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpRequest.Bind(LoveBank.Common.IHttpRequest)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.AppendHeadersWebHeaderCollection">
            <summary>设置 HttpRequest.AppendHeaders(WebHeaderCollection headers) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.ConstructUri">
            <summary>设置 HttpRequest.ConstructUri() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.ConstructorString">
            <summary>设置 HttpRequest.HttpRequest(String uri) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.ContentEncodingGet">
            <summary>设置 HttpRequest.get_ContentEncoding() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.ContentEncodingSetString">
            <summary>设置 HttpRequest.set_ContentEncoding(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.ContentTypeGet">
            <summary>设置 HttpRequest.get_ContentType() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.ContentTypeSetString">
            <summary>设置 HttpRequest.set_ContentType(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.GetConstructedUri">
            <summary>设置 HttpRequest.GetConstructedUri() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.MethodGet">
            <summary>设置 HttpRequest.get_Method() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.MethodSetString">
            <summary>设置 HttpRequest.set_Method(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.Request">
            <summary>设置 HttpRequest.Request() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.RetriveResponseWebResponse">
            <summary>设置 HttpRequest.RetriveResponse(WebResponse webResponse) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.WriteBodyStream">
            <summary>设置 HttpRequest.WriteBody(Stream reqStream) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimHttpRequest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.AllInstances.AppendHeadersWebHeaderCollection">
            <summary>设置 HttpRequest.AppendHeaders(WebHeaderCollection headers) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.AllInstances.ConstructUri">
            <summary>设置 HttpRequest.ConstructUri() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.AllInstances.ContentEncodingGet">
            <summary>设置 HttpRequest.get_ContentEncoding() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.AllInstances.ContentEncodingSetString">
            <summary>设置 HttpRequest.set_ContentEncoding(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.AllInstances.ContentTypeGet">
            <summary>设置 HttpRequest.get_ContentType() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.AllInstances.ContentTypeSetString">
            <summary>设置 HttpRequest.set_ContentType(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.AllInstances.GetConstructedUri">
            <summary>设置 HttpRequest.GetConstructedUri() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.AllInstances.MethodGet">
            <summary>设置 HttpRequest.get_Method() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.AllInstances.MethodSetString">
            <summary>设置 HttpRequest.set_Method(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.AllInstances.Request">
            <summary>设置 HttpRequest.Request() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.AllInstances.RetriveResponseWebResponse">
            <summary>设置 HttpRequest.RetriveResponse(WebResponse webResponse) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpRequest.AllInstances.WriteBodyStream">
            <summary>设置 HttpRequest.WriteBody(Stream reqStream) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimHttpResult">
            <summary>LoveBank.Common.HttpResult 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpResult.#ctor(LoveBank.Common.HttpResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimHttpResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.Constructor">
            <summary>设置 HttpResult.HttpResult() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.CookieCollectionGet">
            <summary>设置 HttpResult.get_CookieCollection() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.CookieCollectionSetCookieCollection">
            <summary>设置 HttpResult.set_CookieCollection(CookieCollection value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.CookieGet">
            <summary>设置 HttpResult.get_Cookie() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.CookieSetString">
            <summary>设置 HttpResult.set_Cookie(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.HeaderGet">
            <summary>设置 HttpResult.get_Header() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.HeaderSetWebHeaderCollection">
            <summary>设置 HttpResult.set_Header(WebHeaderCollection value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.HtmlGet">
            <summary>设置 HttpResult.get_Html() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.HtmlSetString">
            <summary>设置 HttpResult.set_Html(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.ResultByteGet">
            <summary>设置 HttpResult.get_ResultByte() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.ResultByteSetByteArray">
            <summary>设置 HttpResult.set_ResultByte(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.StatusCodeGet">
            <summary>设置 HttpResult.get_StatusCode() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.StatusCodeSetHttpStatusCode">
            <summary>设置 HttpResult.set_StatusCode(HttpStatusCode value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.StatusDescriptionGet">
            <summary>设置 HttpResult.get_StatusDescription() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.StatusDescriptionSetString">
            <summary>设置 HttpResult.set_StatusDescription(String value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimHttpResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.AllInstances.CookieCollectionGet">
            <summary>设置 HttpResult.get_CookieCollection() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.AllInstances.CookieCollectionSetCookieCollection">
            <summary>设置 HttpResult.set_CookieCollection(CookieCollection value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.AllInstances.CookieGet">
            <summary>设置 HttpResult.get_Cookie() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.AllInstances.CookieSetString">
            <summary>设置 HttpResult.set_Cookie(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.AllInstances.HeaderGet">
            <summary>设置 HttpResult.get_Header() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.AllInstances.HeaderSetWebHeaderCollection">
            <summary>设置 HttpResult.set_Header(WebHeaderCollection value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.AllInstances.HtmlGet">
            <summary>设置 HttpResult.get_Html() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.AllInstances.HtmlSetString">
            <summary>设置 HttpResult.set_Html(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.AllInstances.ResultByteGet">
            <summary>设置 HttpResult.get_ResultByte() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.AllInstances.ResultByteSetByteArray">
            <summary>设置 HttpResult.set_ResultByte(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.AllInstances.StatusCodeGet">
            <summary>设置 HttpResult.get_StatusCode() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.AllInstances.StatusCodeSetHttpStatusCode">
            <summary>设置 HttpResult.set_StatusCode(HttpStatusCode value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.AllInstances.StatusDescriptionGet">
            <summary>设置 HttpResult.get_StatusDescription() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimHttpResult.AllInstances.StatusDescriptionSetString">
            <summary>设置 HttpResult.set_StatusDescription(String value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimIQueryableExtensions">
            <summary>LoveBank.Common.IQueryableExtensions 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimIQueryableExtensions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimIQueryableExtensions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimIQueryableExtensions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimIQueryableExtensions.ToJsonPageListOf1IQueryableOfM0Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.IQueryable{``0},System.Int32,LoveBank.Common.JsonPageList{``0}})">
            <summary>设置 IQueryableExtensions.ToJsonPageList(IQueryable`1&lt;!!0&gt; source, Int32 total) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimIQueryableExtensions.ToJsonPageListOf1ListOfM0Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.List{``0},System.Int32,LoveBank.Common.JsonPageList{``0}})">
            <summary>设置 IQueryableExtensions.ToJsonPageList(List`1&lt;!!0&gt; source, Int32 total) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimIQueryableExtensions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimInputType">
            <summary>LoveBank.Common.InputType 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimInputType.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimInputType.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimInputType.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimInputType.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimInputType.GetNameInt32">
            <summary>设置 InputType.GetName(Int32 type) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimInputType.GetTypes">
            <summary>设置 InputType.GetTypes() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimIoC">
            <summary>LoveBank.Common.IoC 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimIoC.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimIoC.#ctor(LoveBank.Common.IoC)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimIoC.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimIoC.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimIoC.ResolveOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>设置 IoC.Resolve() 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimIoC.ResolveOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>设置 IoC.Resolve(String key) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimIoC.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimIoC.Constructor">
            <summary>设置 IoC.IoC() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimIoC.CurrentGet">
            <summary>设置 IoC.get_Current() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimIoC.CurrentSetIContainerAdapter">
            <summary>设置 IoC.set_Current(IContainerAdapter value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimIoC.SetAdapterIContainerAdapter">
            <summary>设置 IoC.SetAdapter(IContainerAdapter adapter) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimIoC.StaticConstructor">
            <summary>设置 IoC.IoC() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimIoC.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimJsonMessage">
            <summary>LoveBank.Common.JsonMessage 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimJsonMessage.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimJsonMessage.#ctor(LoveBank.Common.JsonMessage)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimJsonMessage.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimJsonMessage.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonMessage.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonMessage.Constructor">
            <summary>设置 JsonMessage.JsonMessage() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonMessage.ConstructorBoolean">
            <summary>设置 JsonMessage.JsonMessage(Boolean status) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonMessage.ConstructorBooleanObject">
            <summary>设置 JsonMessage.JsonMessage(Boolean status, Object data) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonMessage.ConstructorBooleanString">
            <summary>设置 JsonMessage.JsonMessage(Boolean status, String msg) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonMessage.ConstructorBooleanStringObject">
            <summary>设置 JsonMessage.JsonMessage(Boolean status, String msg, Object data) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonMessage.DataGet">
            <summary>设置 JsonMessage.get_Data() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonMessage.DataSetObject">
            <summary>设置 JsonMessage.set_Data(Object value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonMessage.InfoGet">
            <summary>设置 JsonMessage.get_Info() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonMessage.InfoSetString">
            <summary>设置 JsonMessage.set_Info(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonMessage.StatusGet">
            <summary>设置 JsonMessage.get_Status() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonMessage.StatusSetBoolean">
            <summary>设置 JsonMessage.set_Status(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimJsonMessage.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonMessage.AllInstances.DataGet">
            <summary>设置 JsonMessage.get_Data() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonMessage.AllInstances.DataSetObject">
            <summary>设置 JsonMessage.set_Data(Object value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonMessage.AllInstances.InfoGet">
            <summary>设置 JsonMessage.get_Info() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonMessage.AllInstances.InfoSetString">
            <summary>设置 JsonMessage.set_Info(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonMessage.AllInstances.StatusGet">
            <summary>设置 JsonMessage.get_Status() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonMessage.AllInstances.StatusSetBoolean">
            <summary>设置 JsonMessage.set_Status(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimJsonPageList`1">
            <summary>LoveBank.Common.JsonPageList`1 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimJsonPageList`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimJsonPageList`1.#ctor(LoveBank.Common.JsonPageList{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimJsonPageList`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimJsonPageList`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonPageList`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonPageList`1.ConstructorInt32ListOfT0">
            <summary>设置 JsonPageList`1.JsonPageList`1(Int32 total, List`1&lt;!0&gt; source) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonPageList`1.rowsGet">
            <summary>设置 JsonPageList`1.get_rows() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonPageList`1.rowsSetListOfT0">
            <summary>设置 JsonPageList`1.set_rows(List`1&lt;!0&gt; value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonPageList`1.totalGet">
            <summary>设置 JsonPageList`1.get_total() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonPageList`1.totalSetInt32">
            <summary>设置 JsonPageList`1.set_total(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimJsonPageList`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonPageList`1.AllInstances.rowsGet">
            <summary>设置 JsonPageList`1.get_rows() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonPageList`1.AllInstances.rowsSetListOfT0">
            <summary>设置 JsonPageList`1.set_rows(List`1&lt;!0&gt; value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonPageList`1.AllInstances.totalGet">
            <summary>设置 JsonPageList`1.get_total() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimJsonPageList`1.AllInstances.totalSetInt32">
            <summary>设置 JsonPageList`1.set_total(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimLocalizableAttribute">
            <summary>LoveBank.Common.LocalizableAttribute 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimLocalizableAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimLocalizableAttribute.#ctor(LoveBank.Common.LocalizableAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimLocalizableAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimLocalizableAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLocalizableAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLocalizableAttribute.ConstructorString">
            <summary>设置 LocalizableAttribute.LocalizableAttribute(String defaultValue) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLocalizableAttribute.ConstructorType">
            <summary>设置 LocalizableAttribute.LocalizableAttribute(Type language) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLocalizableAttribute.ConstructorTypeString">
            <summary>设置 LocalizableAttribute.LocalizableAttribute(Type language, String prefix) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLocalizableAttribute.DefaultGet">
            <summary>设置 LocalizableAttribute.get_Default() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLocalizableAttribute.DefaultSetString">
            <summary>设置 LocalizableAttribute.set_Default(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLocalizableAttribute.LanguageTypeGet">
            <summary>设置 LocalizableAttribute.get_LanguageType() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLocalizableAttribute.LanguageTypeSetType">
            <summary>设置 LocalizableAttribute.set_LanguageType(Type value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLocalizableAttribute.PrefixGet">
            <summary>设置 LocalizableAttribute.get_Prefix() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLocalizableAttribute.PrefixSetString">
            <summary>设置 LocalizableAttribute.set_Prefix(String value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimLocalizableAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLocalizableAttribute.AllInstances.DefaultGet">
            <summary>设置 LocalizableAttribute.get_Default() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLocalizableAttribute.AllInstances.DefaultSetString">
            <summary>设置 LocalizableAttribute.set_Default(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLocalizableAttribute.AllInstances.LanguageTypeGet">
            <summary>设置 LocalizableAttribute.get_LanguageType() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLocalizableAttribute.AllInstances.LanguageTypeSetType">
            <summary>设置 LocalizableAttribute.set_LanguageType(Type value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLocalizableAttribute.AllInstances.PrefixGet">
            <summary>设置 LocalizableAttribute.get_Prefix() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLocalizableAttribute.AllInstances.PrefixSetString">
            <summary>设置 LocalizableAttribute.set_Prefix(String value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimLog">
            <summary>LoveBank.Common.Log 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimLog.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimLog.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimLog.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLog.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLog.CurrentGet">
            <summary>设置 Log.get_Current() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLog.CurrentSetILog">
            <summary>设置 Log.set_Current(ILog value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLog.DebugObject">
            <summary>设置 Log.Debug(Object message) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLog.DebugObjectException">
            <summary>设置 Log.Debug(Object message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLog.ErrorObject">
            <summary>设置 Log.Error(Object message) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLog.ErrorObjectException">
            <summary>设置 Log.Error(Object message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLog.FatalObject">
            <summary>设置 Log.Fatal(Object message) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLog.FatalObjectException">
            <summary>设置 Log.Fatal(Object message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLog.InfoObject">
            <summary>设置 Log.Info(Object message) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLog.InfoObjectException">
            <summary>设置 Log.Info(Object message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLog.SetLogILog">
            <summary>设置 Log.SetLog(ILog log) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimLog.StaticConstructor">
            <summary>设置 Log.Log() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimPageListExtensions">
            <summary>LoveBank.Common.PageListExtensions 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimPageListExtensions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimPageListExtensions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimPageListExtensions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimPageListExtensions.ToPagedListOf1IEnumerableOfM0Int32Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,LoveBank.Common.IPagedList{``0}})">
            <summary>设置 PageListExtensions.ToPagedList(IEnumerable`1&lt;!!0&gt; source, Int32 index, Int32 pageSize) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimPageListExtensions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimPagedList`1">
            <summary>LoveBank.Common.PagedList`1 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimPagedList`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimPagedList`1.#ctor(LoveBank.Common.PagedList{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimPagedList`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimPagedList`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimPagedList`1.Bind(LoveBank.Common.IPagedList)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimPagedList`1.Bind(LoveBank.Common.IPagedList{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimPagedList`1.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimPagedList`1.Bind(System.Collections.Generic.IEnumerable{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimPagedList`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimPagedList`1.ConstructorIEnumerableOfT0Int32Int32">
            <summary>设置 PagedList`1.PagedList`1(IEnumerable`1&lt;!0&gt; source, Int32 index, Int32 pageSize) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimPagedList`1.ConstructorIQueryableOfT0Int32Int32">
            <summary>设置 PagedList`1.PagedList`1(IQueryable`1&lt;!0&gt; source, Int32 index, Int32 pageSize) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimPagedList`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimParamCollection">
            <summary>LoveBank.Common.ParamCollection 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimParamCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimParamCollection.#ctor(LoveBank.Common.ParamCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimParamCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimParamCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimParamCollection.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimParamCollection.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimParamCollection.Bind(System.Collections.IList)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimParamCollection.Bind(System.Collections.Generic.ICollection{LoveBank.Common.ParamPair})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimParamCollection.Bind(System.Collections.Generic.IEnumerable{LoveBank.Common.ParamPair})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimParamCollection.Bind(System.Collections.Generic.IList{LoveBank.Common.ParamPair})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimParamCollection.Bind(System.Collections.Generic.IReadOnlyCollection{LoveBank.Common.ParamPair})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimParamCollection.Bind(System.Collections.Generic.IReadOnlyList{LoveBank.Common.ParamPair})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimParamCollection.AddStringString">
            <summary>设置 ParamCollection.Add(String name, String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimParamCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimParamCollection.Constructor">
            <summary>设置 ParamCollection.ParamCollection() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimParamCollection.ConstructorIEnumerableOfParamPair">
            <summary>设置 ParamCollection.ParamCollection(IEnumerable`1&lt;ParamPair&gt; items) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimParamCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimParamCollection.AllInstances.AddStringString">
            <summary>设置 ParamCollection.Add(String name, String value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimParamPair">
            <summary>LoveBank.Common.ParamPair 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimParamPair.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimParamPair.#ctor(LoveBank.Common.ParamPair)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimParamPair.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimParamPair.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimParamPair.Bind(System.IComparable{LoveBank.Common.ParamPair})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimParamPair.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimParamPair.CompareToParamPair">
            <summary>设置 ParamPair.CompareTo(ParamPair other) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimParamPair.Constructor">
            <summary>设置 ParamPair.ParamPair() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimParamPair.ConstructorStringString">
            <summary>设置 ParamPair.ParamPair(String name, String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimParamPair.NameGet">
            <summary>设置 ParamPair.get_Name() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimParamPair.NameSetString">
            <summary>设置 ParamPair.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimParamPair.ValueGet">
            <summary>设置 ParamPair.get_Value() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimParamPair.ValueSetString">
            <summary>设置 ParamPair.set_Value(String value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimParamPair.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimParamPair.AllInstances.CompareToParamPair">
            <summary>设置 ParamPair.CompareTo(ParamPair other) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimParamPair.AllInstances.NameGet">
            <summary>设置 ParamPair.get_Name() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimParamPair.AllInstances.NameSetString">
            <summary>设置 ParamPair.set_Name(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimParamPair.AllInstances.ValueGet">
            <summary>设置 ParamPair.get_Value() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimParamPair.AllInstances.ValueSetString">
            <summary>设置 ParamPair.set_Value(String value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimPredicateExtensionses">
            <summary>LoveBank.Common.PredicateExtensionses 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimPredicateExtensionses.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimPredicateExtensionses.AndOf1ExpressionOfFuncOfM0BooleanExpressionOfFuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}})">
            <summary>设置 PredicateExtensionses.And(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; exp_left, Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; exp_right) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimPredicateExtensionses.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimPredicateExtensionses.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimPredicateExtensionses.FalseOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}})">
            <summary>设置 PredicateExtensionses.False() 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimPredicateExtensionses.OrOf1ExpressionOfFuncOfM0BooleanExpressionOfFuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}})">
            <summary>设置 PredicateExtensionses.Or(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; exp_left, Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; exp_right) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimPredicateExtensionses.TrueOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}})">
            <summary>设置 PredicateExtensionses.True() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimPredicateExtensionses.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimRegularExtensions">
            <summary>LoveBank.Common.RegularExtensions 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimRegularExtensions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimRegularExtensions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimRegularExtensions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimRegularExtensions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimRegularExtensions.IsEmailString">
            <summary>设置 RegularExtensions.IsEmail(String target) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimRegularExtensions.IsWebUrlString">
            <summary>设置 RegularExtensions.IsWebUrl(String target) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimRegularExtensions.MatchAndNotNullStringRegex">
            <summary>设置 RegularExtensions.MatchAndNotNull(String target, Regex regex) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimRegularExtensions.MatchStringRegex">
            <summary>设置 RegularExtensions.Match(String target, Regex regex) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimRegularUtil">
            <summary>LoveBank.Common.RegularUtil 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimRegularUtil.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimRegularUtil.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimRegularUtil.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimRegularUtil.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimRegularUtil.StaticConstructor">
            <summary>设置 RegularUtil.RegularUtil() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimServiceRegisterExtensions">
            <summary>LoveBank.Common.ServiceRegisterExtensions 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.RegisterAsPerRequestOf1IServiceRegister``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LoveBank.Common.IServiceRegister,LoveBank.Common.IServiceRegister})">
            <summary>设置 ServiceRegisterExtensions.RegisterAsPerRequest(IServiceRegister instance) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.RegisterAsPerRequestOf1IServiceRegisterFuncOfIServiceResolverM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LoveBank.Common.IServiceRegister,System.Func{LoveBank.Common.IServiceResolver,``0},LoveBank.Common.IServiceRegister})">
            <summary>设置 ServiceRegisterExtensions.RegisterAsPerRequest(IServiceRegister instance, Func`2&lt;IServiceResolver,!!0&gt; constructFactory) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.RegisterAsPerRequestOf2IServiceRegister``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LoveBank.Common.IServiceRegister,LoveBank.Common.IServiceRegister})">
            <summary>设置 ServiceRegisterExtensions.RegisterAsPerRequest(IServiceRegister instance) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.RegisterAsSingletonOf1IServiceRegister``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LoveBank.Common.IServiceRegister,LoveBank.Common.IServiceRegister})">
            <summary>设置 ServiceRegisterExtensions.RegisterAsSingleton(IServiceRegister instance) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.RegisterAsSingletonOf2IServiceRegister``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LoveBank.Common.IServiceRegister,LoveBank.Common.IServiceRegister})">
            <summary>设置 ServiceRegisterExtensions.RegisterAsSingleton(IServiceRegister instance) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.RegisterAsTransientOf1IServiceRegister``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LoveBank.Common.IServiceRegister,LoveBank.Common.IServiceRegister})">
            <summary>设置 ServiceRegisterExtensions.RegisterAsTransient(IServiceRegister instance) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.RegisterAsTransientOf1IServiceRegisterFuncOfIServiceResolverM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LoveBank.Common.IServiceRegister,System.Func{LoveBank.Common.IServiceResolver,``0},LoveBank.Common.IServiceRegister})">
            <summary>设置 ServiceRegisterExtensions.RegisterAsTransient(IServiceRegister instance, Func`2&lt;IServiceResolver,!!0&gt; constructFactory) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.RegisterAsTransientOf2IServiceRegister``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LoveBank.Common.IServiceRegister,LoveBank.Common.IServiceRegister})">
            <summary>设置 ServiceRegisterExtensions.RegisterAsTransient(IServiceRegister instance) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.RegisterInstanceOf1IServiceRegisterObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LoveBank.Common.IServiceRegister,System.Object,LoveBank.Common.IServiceRegister})">
            <summary>设置 ServiceRegisterExtensions.RegisterInstance(IServiceRegister instance, Object service) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.RegisterInstanceOf1IServiceRegisterStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LoveBank.Common.IServiceRegister,System.String,System.Object,LoveBank.Common.IServiceRegister})">
            <summary>设置 ServiceRegisterExtensions.RegisterInstance(IServiceRegister instance, String key, Object service) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.RegisterTypeOf2IServiceRegisterLifetimeType``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LoveBank.Common.IServiceRegister,LoveBank.Common.LifetimeType,LoveBank.Common.IServiceRegister})">
            <summary>设置 ServiceRegisterExtensions.RegisterType(IServiceRegister instance, LifetimeType lifetime) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.RegisterAsPerRequestIServiceRegisterType">
            <summary>设置 ServiceRegisterExtensions.RegisterAsPerRequest(IServiceRegister instance, Type implementationType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.RegisterAsPerRequestIServiceRegisterTypeType">
            <summary>设置 ServiceRegisterExtensions.RegisterAsPerRequest(IServiceRegister instance, Type serviceType, Type implementationType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.RegisterAsSingletonIServiceRegisterType">
            <summary>设置 ServiceRegisterExtensions.RegisterAsSingleton(IServiceRegister instance, Type implementationType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.RegisterAsSingletonIServiceRegisterTypeType">
            <summary>设置 ServiceRegisterExtensions.RegisterAsSingleton(IServiceRegister instance, Type serviceType, Type implementationType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.RegisterAsTransientIServiceRegisterType">
            <summary>设置 ServiceRegisterExtensions.RegisterAsTransient(IServiceRegister instance, Type implementationType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.RegisterAsTransientIServiceRegisterTypeType">
            <summary>设置 ServiceRegisterExtensions.RegisterAsTransient(IServiceRegister instance, Type serviceType, Type implementationType) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.RegisterInstanceIServiceRegisterObject">
            <summary>设置 ServiceRegisterExtensions.RegisterInstance(IServiceRegister instance, Object service) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimServiceRegisterExtensions.RegisterInstanceIServiceRegisterStringObject">
            <summary>设置 ServiceRegisterExtensions.RegisterInstance(IServiceRegister instance, String key, Object service) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimServiceResolverExtensions">
            <summary>LoveBank.Common.ServiceResolverExtensions 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceResolverExtensions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceResolverExtensions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceResolverExtensions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceResolverExtensions.ResolveAllOf1IServiceResolver``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LoveBank.Common.IServiceResolver,System.Collections.Generic.IEnumerable{``0}})">
            <summary>设置 ServiceResolverExtensions.ResolveAll(IServiceResolver container) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceResolverExtensions.ResolveOf1IServiceResolver``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LoveBank.Common.IServiceResolver,``0})">
            <summary>设置 ServiceResolverExtensions.Resolve(IServiceResolver container) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimServiceResolverExtensions.ResolveOf1IServiceResolverString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{LoveBank.Common.IServiceResolver,System.String,``0})">
            <summary>设置 ServiceResolverExtensions.Resolve(IServiceResolver container, String key) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimServiceResolverExtensions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimStaticPagedList`1">
            <summary>LoveBank.Common.StaticPagedList`1 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimStaticPagedList`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimStaticPagedList`1.#ctor(LoveBank.Common.StaticPagedList{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimStaticPagedList`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimStaticPagedList`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimStaticPagedList`1.Bind(LoveBank.Common.IPagedList)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimStaticPagedList`1.Bind(LoveBank.Common.IPagedList{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimStaticPagedList`1.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimStaticPagedList`1.Bind(System.Collections.Generic.IEnumerable{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStaticPagedList`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStaticPagedList`1.ConstructorIEnumerableOfT0Int32Int32Int32">
            <summary>设置 StaticPagedList`1.StaticPagedList`1(IEnumerable`1&lt;!0&gt; source, Int32 index, Int32 pageSize, Int32 totalItemCount) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimStaticPagedList`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimStringExtensions">
            <summary>LoveBank.Common.StringExtensions 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimStringExtensions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimStringExtensions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimStringExtensions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.EmailMaskString">
            <summary>设置 StringExtensions.EmailMask(String email) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.FormatWithStringIFormatProviderObjectArray">
            <summary>设置 StringExtensions.FormatWith(String target, IFormatProvider provider, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.FormatWithStringObjectArray">
            <summary>设置 StringExtensions.FormatWith(String target, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.GetEllipsisTextStringFontInt32">
            <summary>设置 StringExtensions.GetEllipsisText(String text, Font font, Int32 maxWidth) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.GetMaxTextStringFontInt32">
            <summary>设置 StringExtensions.GetMaxText(String text, Font font, Int32 maxWidth) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.GetTextPosofWordStringFontInt32Boolean">
            <summary>设置 StringExtensions.GetTextPosofWord(String text, Font font, Int32 maxWidth, Boolean ellipsisEnd) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.GetTextWidthStringFont">
            <summary>设置 StringExtensions.GetTextWidth(String text, Font font) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.HashStringBooleanBoolean">
            <summary>设置 StringExtensions.Hash(String target, Boolean Hex, Boolean utf8) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.IsCaseInsensitiveEqualStringString">
            <summary>设置 StringExtensions.IsCaseInsensitiveEqual(String instance, String comparing) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.IsCaseSensitiveEqualStringString">
            <summary>设置 StringExtensions.IsCaseSensitiveEqual(String instance, String comparing) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.JoinArrayStringArrayCharBoolean">
            <summary>设置 StringExtensions.JoinArray(String[] array, Char separator, Boolean startAndEnd) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.NullSafeString">
            <summary>设置 StringExtensions.NullSafe(String target) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.ReplaceEndStringStringString">
            <summary>设置 StringExtensions.ReplaceEnd(String target, String oldValue, String newValue) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.ReplaceStartStringStringString">
            <summary>设置 StringExtensions.ReplaceStart(String target, String oldValue, String newValue) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.ReplaceStringICollectionOfStringString">
            <summary>设置 StringExtensions.Replace(String target, ICollection`1&lt;String&gt; oldValues, String newValue) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.SaltAndHashStringString">
            <summary>设置 StringExtensions.SaltAndHash(String rawString, String salt) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.SplitNullStringChar">
            <summary>设置 StringExtensions.SplitNull(String source, Char separator) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.ToConfuseStringInt32Int32">
            <summary>设置 StringExtensions.ToConfuse(String target, Int32 before, Int32 after) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.ToConfuseStringInt32Int32CharInt32">
            <summary>设置 StringExtensions.ToConfuse(String target, Int32 before, Int32 after, Char value, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.ToConfuseStringInt32Int32Int32">
            <summary>设置 StringExtensions.ToConfuse(String target, Int32 before, Int32 after, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.ToDesDecryptStringString">
            <summary>设置 StringExtensions.ToDesDecrypt(String target, String key) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.ToDesEncryptStringString">
            <summary>设置 StringExtensions.ToDesEncrypt(String target, String key) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.ToGuidString">
            <summary>设置 StringExtensions.ToGuid(String target) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions.WrapAtStringInt32">
            <summary>设置 StringExtensions.WrapAt(String target, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimStringExtensions._SplitNullb__4String">
            <summary>设置 StringExtensions.&lt;SplitNull&gt;b__4(String x) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimUtils">
            <summary>LoveBank.Common.Utils 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimUtils.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimUtils.#ctor(LoveBank.Common.Utils)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimUtils.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimUtils.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimUtils.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimUtils.Constructor">
            <summary>设置 Utils.Utils() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimUtils.CutStringStringInt32">
            <summary>设置 Utils.CutString(String str, Int32 startIndex) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimUtils.CutStringStringInt32Int32">
            <summary>设置 Utils.CutString(String str, Int32 startIndex, Int32 length) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimUtils.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.ShimXMLHelper">
            <summary>LoveBank.Common.XMLHelper 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimXMLHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimXMLHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimXMLHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimXMLHelper.XmlDeserializeFromFileOf1StringEncoding``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Text.Encoding,``0})">
            <summary>设置 XMLHelper.XmlDeserializeFromFile(String path, Encoding encoding) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.ShimXMLHelper.XmlDeserializeOf1StringEncoding``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Text.Encoding,``0})">
            <summary>设置 XMLHelper.XmlDeserialize(String s, Encoding encoding) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimXMLHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimXMLHelper.XmlDeserializeTypeStringEncoding">
            <summary>设置 XMLHelper.XmlDeserialize(Type type, String s, Encoding encoding) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimXMLHelper.XmlSerializeInternalStreamObjectEncoding">
            <summary>设置 XMLHelper.XmlSerializeInternal(Stream stream, Object o, Encoding encoding) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimXMLHelper.XmlSerializeObjectEncoding">
            <summary>设置 XMLHelper.XmlSerialize(Object o, Encoding encoding) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.ShimXMLHelper.XmlSerializeToFileObjectStringEncoding">
            <summary>设置 XMLHelper.XmlSerializeToFile(Object o, String path, Encoding encoding) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubAutheTicketManager">
            <summary>LoveBank.Common.AutheTicketManager 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubAutheTicketManager.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubAutheTicketManager.InitializeStub">
            <summary>初始化 type StubAutheTicketManager 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubAutheTicketManager.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubAutheTicketManager.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubAutheTicketManager.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubBaseExcelHelper">
            <summary>LoveBank.Common.BaseExcelHelper 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubBaseExcelHelper.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubBaseExcelHelper.InitializeStub">
            <summary>初始化 type StubBaseExcelHelper 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubBaseExcelHelper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubBaseExcelHelper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubBaseExcelHelper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubBasePagedList`1">
            <summary>LoveBank.Common.BasePagedList`1 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubBasePagedList`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubBasePagedList`1.InitializeStub">
            <summary>初始化 type StubBasePagedList 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubBasePagedList`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubBasePagedList`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubBasePagedList`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubContainerAdapter">
            <summary>LoveBank.Common.ContainerAdapter 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubContainerAdapter.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubContainerAdapter.DisposeCore">
            <summary>设置 ContainerAdapter.DisposeCore() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubContainerAdapter.DisposeCore01">
            <summary>设置 ContainerAdapter.DisposeCore() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubContainerAdapter.DoGetService(System.Type,System.String)">
            <summary>设置 ContainerAdapter.DoGetService(Type serviceType, String key) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubContainerAdapter.DoGetServiceTypeString">
            <summary>设置 ContainerAdapter.DoGetService(Type serviceType, String key) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubContainerAdapter.DoGetServices(System.Type)">
            <summary>设置 ContainerAdapter.DoGetServices(Type serviceType) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubContainerAdapter.DoGetServicesType">
            <summary>设置 ContainerAdapter.DoGetServices(Type serviceType) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubContainerAdapter.InitializeStub">
            <summary>初始化 type StubContainerAdapter 的新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubContainerAdapter.Inject(System.Object)">
            <summary>设置 ContainerAdapter.Inject(Object instance) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubContainerAdapter.InjectObject">
            <summary>设置 ContainerAdapter.Inject(Object instance) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubContainerAdapter.RegisterInstance(System.String,System.Type,System.Object)">
            <summary>设置 ContainerAdapter.RegisterInstance(String key, Type serviceType, Object instance) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubContainerAdapter.RegisterInstanceStringTypeObject">
            <summary>设置 ContainerAdapter.RegisterInstance(String key, Type serviceType, Object instance) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubContainerAdapter.RegisterType``1(System.String,System.Func{LoveBank.Common.IServiceResolver,``0},LoveBank.Common.LifetimeType)">
            <summary>设置 ContainerAdapter.RegisterType(String key, Func`2&lt;IServiceResolver,!!0&gt; constructFactory, LifetimeType lifetime) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubContainerAdapter.RegisterType(System.String,System.Type,System.Type,LoveBank.Common.LifetimeType)">
            <summary>设置 ContainerAdapter.RegisterType(String key, Type serviceType, Type implementationType, LifetimeType lifetime) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubContainerAdapter.RegisterTypeOf1StringFuncOfIServiceResolverM0LifetimeType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Func{LoveBank.Common.IServiceResolver,``0},LoveBank.Common.LifetimeType,LoveBank.Common.IServiceRegister})">
            <summary>设置 RegisterType(String key, Func`2&lt;IServiceResolver,!!0&gt; constructFactory, LifetimeType lifetime) 的存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubContainerAdapter.RegisterTypeStringTypeTypeLifetimeType">
            <summary>设置 ContainerAdapter.RegisterType(String key, Type serviceType, Type implementationType, LifetimeType lifetime) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubContainerAdapter.Resolve(System.Type)">
            <summary>设置 ContainerAdapter.Resolve(Type serviceType) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubContainerAdapter.Resolve(System.Type,System.String)">
            <summary>设置 ContainerAdapter.Resolve(Type serviceType, String key) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubContainerAdapter.ResolveAll(System.Type)">
            <summary>设置 ContainerAdapter.ResolveAll(Type serviceType) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubContainerAdapter.ResolveAllType">
            <summary>设置 ContainerAdapter.ResolveAll(Type serviceType) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubContainerAdapter.ResolveType">
            <summary>设置 ContainerAdapter.Resolve(Type serviceType) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubContainerAdapter.ResolveTypeString">
            <summary>设置 ContainerAdapter.Resolve(Type serviceType, String key) 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubContainerAdapter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubContainerAdapter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubContainerAdapter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubEnumItemDescriptionAttribute">
            <summary>LoveBank.Common.EnumItemDescriptionAttribute 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubEnumItemDescriptionAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubEnumItemDescriptionAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubEnumItemDescriptionAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubEnumItemDescriptionAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubEnumItemDescriptionAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubEnumItemDescriptionAttribute.InitializeStub">
            <summary>初始化 type StubEnumItemDescriptionAttribute 的新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubEnumItemDescriptionAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubEnumItemDescriptionAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubEnumItemDescriptionAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubEnumItemDescriptionAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubEnumItemDescriptionAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubEnumItemDescriptionAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubEnumItemDescriptionAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubEnumItemDescriptionAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubEnumItemDescriptionAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubExcelHelper">
            <summary>LoveBank.Common.ExcelHelper 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubExcelHelper.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubExcelHelper.InitializeStub">
            <summary>初始化 type StubExcelHelper 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubExcelHelper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubExcelHelper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubExcelHelper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubFTPHelper">
            <summary>LoveBank.Common.FTPHelper 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubFTPHelper.#ctor(System.String,System.String,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubFTPHelper.InitializeStub">
            <summary>初始化 type StubFTPHelper 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubFTPHelper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubFTPHelper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubFTPHelper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubFileHelper">
            <summary>LoveBank.Common.FileHelper 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubFileHelper.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubFileHelper.InitializeStub">
            <summary>初始化 type StubFileHelper 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubFileHelper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubFileHelper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubFileHelper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubFileUploadService">
            <summary>LoveBank.Common.FileUploadService 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubFileUploadService.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubFileUploadService.InitializeStub">
            <summary>初始化 type StubFileUploadService 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubFileUploadService.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubFileUploadService.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubFileUploadService.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubHttpException">
            <summary>LoveBank.Common.HttpException 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpException.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpException.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpException.#ctor(System.String,System.Int32,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpException.#ctor(System.String,System.Int32,System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubHttpException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubHttpException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpException.InitializeStub">
            <summary>初始化 type StubHttpException 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubHttpGet">
            <summary>LoveBank.Common.HttpGet 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpGet.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpGet.AppendHeaders(System.Net.WebHeaderCollection)">
            <summary>设置 HttpRequest.AppendHeaders(WebHeaderCollection headers) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpGet.AppendHeadersWebHeaderCollection">
            <summary>设置 HttpRequest.AppendHeaders(WebHeaderCollection headers) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpGet.AttachBackingFieldToContentEncoding">
            <summary>附加委托以将 StubHttpGet.ContentEncoding 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpGet.AttachBackingFieldToContentType">
            <summary>附加委托以将 StubHttpGet.ContentType 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpGet.AttachBackingFieldToMethod">
            <summary>附加委托以将 StubHttpGet.Method 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpGet.ConstructUri">
            <summary>设置 HttpGet.ConstructUri() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpGet.ConstructUri01">
            <summary>设置 HttpGet.ConstructUri() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpGet.ContentEncodingGet">
            <summary>设置 HttpRequest.get_ContentEncoding() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpGet.ContentEncodingSetString">
            <summary>设置 HttpRequest.set_ContentEncoding(String value) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpGet.ContentTypeGet">
            <summary>设置 HttpRequest.get_ContentType() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpGet.ContentTypeSetString">
            <summary>设置 HttpRequest.set_ContentType(String value) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpGet.GetConstructedUri">
            <summary>设置 HttpRequest.GetConstructedUri() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpGet.GetConstructedUri01">
            <summary>设置 HttpRequest.GetConstructedUri() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpGet.InitializeStub">
            <summary>初始化 type StubHttpGet 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpGet.MethodGet">
            <summary>设置 HttpRequest.get_Method() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpGet.MethodSetString">
            <summary>设置 HttpRequest.set_Method(String value) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpGet.ParamsGet">
            <summary>设置 HttpGet.get_Params() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpGet.Request">
            <summary>设置 HttpRequest.Request() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpGet.Request01">
            <summary>设置 HttpRequest.Request() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpGet.RetriveResponse(System.Net.WebResponse)">
            <summary>设置 HttpRequest.RetriveResponse(WebResponse webResponse) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpGet.RetriveResponseWebResponse">
            <summary>设置 HttpRequest.RetriveResponse(WebResponse webResponse) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpGet.WriteBody(System.IO.Stream)">
            <summary>设置 HttpRequest.WriteBody(Stream reqStream) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpGet.WriteBodyStream">
            <summary>设置 HttpRequest.WriteBody(Stream reqStream) 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpGet.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpGet.ContentEncoding">
            <summary>设置 HttpRequest.get_ContentEncoding() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpGet.ContentType">
            <summary>设置 HttpRequest.get_ContentType() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpGet.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpGet.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpGet.Method">
            <summary>设置 HttpRequest.get_Method() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpGet.Params">
            <summary>设置 HttpGet.get_Params() 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubHttpHelper">
            <summary>LoveBank.Common.HttpHelper 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpHelper.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpHelper.InitializeStub">
            <summary>初始化 type StubHttpHelper 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpHelper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpHelper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpHelper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubHttpItem">
            <summary>LoveBank.Common.HttpItem 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpItem.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpItem.InitializeStub">
            <summary>初始化 type StubHttpItem 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpItem.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpItem.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpItem.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubHttpPost">
            <summary>LoveBank.Common.HttpPost 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpPost.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpPost.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpPost.AppendHeaders(System.Net.WebHeaderCollection)">
            <summary>设置 HttpPost.AppendHeaders(WebHeaderCollection headers) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpPost.AppendHeadersWebHeaderCollection">
            <summary>设置 HttpPost.AppendHeaders(WebHeaderCollection headers) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpPost.AttachBackingFieldToContentEncoding">
            <summary>附加委托以将 StubHttpPost.ContentEncoding 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpPost.AttachBackingFieldToContentType">
            <summary>附加委托以将 StubHttpPost.ContentType 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpPost.AttachBackingFieldToMethod">
            <summary>附加委托以将 StubHttpPost.Method 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpPost.AttachBackingFieldToPostData">
            <summary>附加委托以将 StubHttpPost.PostData 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpPost.ConstructUri">
            <summary>设置 HttpRequest.ConstructUri() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpPost.ConstructUri01">
            <summary>设置 HttpRequest.ConstructUri() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpPost.ContentEncodingGet">
            <summary>设置 HttpRequest.get_ContentEncoding() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpPost.ContentEncodingSetString">
            <summary>设置 HttpRequest.set_ContentEncoding(String value) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpPost.ContentTypeGet">
            <summary>设置 HttpRequest.get_ContentType() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpPost.ContentTypeSetString">
            <summary>设置 HttpRequest.set_ContentType(String value) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpPost.GetConstructedUri">
            <summary>设置 HttpRequest.GetConstructedUri() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpPost.GetConstructedUri01">
            <summary>设置 HttpRequest.GetConstructedUri() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpPost.InitializeStub">
            <summary>初始化 type StubHttpPost 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpPost.MethodGet">
            <summary>设置 HttpRequest.get_Method() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpPost.MethodSetString">
            <summary>设置 HttpRequest.set_Method(String value) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpPost.PostDataGet">
            <summary>设置 HttpPost.get_PostData() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpPost.PostDataSetString">
            <summary>设置 HttpPost.set_PostData(String value) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpPost.Request">
            <summary>设置 HttpRequest.Request() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpPost.Request01">
            <summary>设置 HttpRequest.Request() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpPost.RetriveResponse(System.Net.WebResponse)">
            <summary>设置 HttpRequest.RetriveResponse(WebResponse webResponse) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpPost.RetriveResponseWebResponse">
            <summary>设置 HttpRequest.RetriveResponse(WebResponse webResponse) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpPost.WriteBody(System.IO.Stream)">
            <summary>设置 HttpPost.WriteBody(Stream reqStream) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpPost.WriteBodyStream">
            <summary>设置 HttpPost.WriteBody(Stream reqStream) 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpPost.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpPost.ContentEncoding">
            <summary>设置 HttpRequest.get_ContentEncoding() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpPost.ContentType">
            <summary>设置 HttpRequest.get_ContentType() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpPost.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpPost.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpPost.Method">
            <summary>设置 HttpRequest.get_Method() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpPost.PostData">
            <summary>设置 HttpPost.get_PostData() 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubHttpRequest">
            <summary>LoveBank.Common.HttpRequest 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpRequest.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpRequest.AppendHeaders(System.Net.WebHeaderCollection)">
            <summary>设置 HttpRequest.AppendHeaders(WebHeaderCollection headers) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpRequest.AppendHeadersWebHeaderCollection">
            <summary>设置 HttpRequest.AppendHeaders(WebHeaderCollection headers) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpRequest.AttachBackingFieldToContentEncoding">
            <summary>附加委托以将 StubHttpRequest.ContentEncoding 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpRequest.AttachBackingFieldToContentType">
            <summary>附加委托以将 StubHttpRequest.ContentType 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpRequest.AttachBackingFieldToMethod">
            <summary>附加委托以将 StubHttpRequest.Method 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpRequest.ConstructUri">
            <summary>设置 HttpRequest.ConstructUri() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpRequest.ConstructUri01">
            <summary>设置 HttpRequest.ConstructUri() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpRequest.ContentEncodingGet">
            <summary>设置 HttpRequest.get_ContentEncoding() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpRequest.ContentEncodingSetString">
            <summary>设置 HttpRequest.set_ContentEncoding(String value) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpRequest.ContentTypeGet">
            <summary>设置 HttpRequest.get_ContentType() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpRequest.ContentTypeSetString">
            <summary>设置 HttpRequest.set_ContentType(String value) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpRequest.GetConstructedUri">
            <summary>设置 HttpRequest.GetConstructedUri() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpRequest.GetConstructedUri01">
            <summary>设置 HttpRequest.GetConstructedUri() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpRequest.InitializeStub">
            <summary>初始化 type StubHttpRequest 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpRequest.MethodGet">
            <summary>设置 HttpRequest.get_Method() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpRequest.MethodSetString">
            <summary>设置 HttpRequest.set_Method(String value) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpRequest.Request">
            <summary>设置 HttpRequest.Request() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpRequest.Request01">
            <summary>设置 HttpRequest.Request() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpRequest.RetriveResponse(System.Net.WebResponse)">
            <summary>设置 HttpRequest.RetriveResponse(WebResponse webResponse) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpRequest.RetriveResponseWebResponse">
            <summary>设置 HttpRequest.RetriveResponse(WebResponse webResponse) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpRequest.WriteBody(System.IO.Stream)">
            <summary>设置 HttpRequest.WriteBody(Stream reqStream) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubHttpRequest.WriteBodyStream">
            <summary>设置 HttpRequest.WriteBody(Stream reqStream) 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpRequest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpRequest.ContentEncoding">
            <summary>设置 HttpRequest.get_ContentEncoding() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpRequest.ContentType">
            <summary>设置 HttpRequest.get_ContentType() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpRequest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpRequest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpRequest.Method">
            <summary>设置 HttpRequest.get_Method() 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubHttpResult">
            <summary>LoveBank.Common.HttpResult 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpResult.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubHttpResult.InitializeStub">
            <summary>初始化 type StubHttpResult 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubHttpResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubIContainerAdapter">
            <summary>LoveBank.Common.IContainerAdapter 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIContainerAdapter.#ctor">
            <summary>初始化 type StubIContainerAdapter 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIContainerAdapter.Dispose">
            <summary>设置 IDisposable.Dispose() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIContainerAdapter.InjectObject">
            <summary>设置 IServiceInjector.Inject(Object instance) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIContainerAdapter.lbc::LoveBank#Common#IServiceInjector#Inject(System.Object)">
            <summary>设置 IServiceInjector.Inject(Object instance) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIContainerAdapter.lbc::LoveBank#Common#IServiceRegister#RegisterInstance(System.String,System.Type,System.Object)">
            <summary>设置 IServiceRegister.RegisterInstance(String key, Type serviceType, Object instance) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIContainerAdapter.lbc::LoveBank#Common#IServiceRegister#RegisterType``1(System.String,System.Func{LoveBank.Common.IServiceResolver,``0},LoveBank.Common.LifetimeType)">
            <summary>设置 IServiceRegister.RegisterType(String key, Func`2&lt;IServiceResolver,!!0&gt; constructFactory, LifetimeType lifetime) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIContainerAdapter.lbc::LoveBank#Common#IServiceRegister#RegisterType(System.String,System.Type,System.Type,LoveBank.Common.LifetimeType)">
            <summary>设置 IServiceRegister.RegisterType(String key, Type serviceType, Type implementationType, LifetimeType lifetime) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIContainerAdapter.lbc::LoveBank#Common#IServiceResolver#Resolve(System.Type)">
            <summary>设置 IServiceResolver.Resolve(Type serviceType) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIContainerAdapter.lbc::LoveBank#Common#IServiceResolver#Resolve(System.Type,System.String)">
            <summary>设置 IServiceResolver.Resolve(Type serviceType, String key) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIContainerAdapter.lbc::LoveBank#Common#IServiceResolver#ResolveAll(System.Type)">
            <summary>设置 IServiceResolver.ResolveAll(Type serviceType) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIContainerAdapter.RegisterInstanceStringTypeObject">
            <summary>设置 IServiceRegister.RegisterInstance(String key, Type serviceType, Object instance) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIContainerAdapter.RegisterTypeOf1StringFuncOfIServiceResolverM0LifetimeType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Func{LoveBank.Common.IServiceResolver,``0},LoveBank.Common.LifetimeType,LoveBank.Common.IServiceRegister})">
            <summary>设置 RegisterType(String key, Func`2&lt;IServiceResolver,!!0&gt; constructFactory, LifetimeType lifetime) 的存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIContainerAdapter.RegisterTypeStringTypeTypeLifetimeType">
            <summary>设置 IServiceRegister.RegisterType(String key, Type serviceType, Type implementationType, LifetimeType lifetime) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIContainerAdapter.ResolveAllType">
            <summary>设置 IServiceResolver.ResolveAll(Type serviceType) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIContainerAdapter.ResolveType">
            <summary>设置 IServiceResolver.Resolve(Type serviceType) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIContainerAdapter.ResolveTypeString">
            <summary>设置 IServiceResolver.Resolve(Type serviceType, String key) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIContainerAdapter.global::System#IDisposable#Dispose">
            <summary>设置 IDisposable.Dispose() 的 存根</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubIFileUploadService">
            <summary>LoveBank.Common.IFileUploadService 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIFileUploadService.#ctor">
            <summary>初始化 type StubIFileUploadService 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIFileUploadService.DeleteFileString">
            <summary>设置 IFileUploadService.DeleteFile(String fullName) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIFileUploadService.FileDownloadHttpResponseBaseString">
            <summary>设置 IFileUploadService.FileDownload(HttpResponseBase response, String filePah) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIFileUploadService.IsExistsString">
            <summary>设置 IFileUploadService.IsExists(String fullName) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIFileUploadService.lbc::LoveBank#Common#IFileUploadService#DeleteFile(System.String)">
            <summary>设置 IFileUploadService.DeleteFile(String fullName) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIFileUploadService.lbc::LoveBank#Common#IFileUploadService#FileDownload(System.Web.HttpResponseBase,System.String)">
            <summary>设置 IFileUploadService.FileDownload(HttpResponseBase response, String filePah) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIFileUploadService.lbc::LoveBank#Common#IFileUploadService#IsExists(System.String)">
            <summary>设置 IFileUploadService.IsExists(String fullName) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIFileUploadService.lbc::LoveBank#Common#IFileUploadService#UploadFile(System.Web.HttpPostedFileBase,System.String)">
            <summary>设置 IFileUploadService.UploadFile(HttpPostedFileBase postedFile, String savePath) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIFileUploadService.lbc::LoveBank#Common#IFileUploadService#UploadFile(System.Web.HttpPostedFileBase,System.String,System.Boolean)">
            <summary>设置 IFileUploadService.UploadFile(HttpPostedFileBase postedFile, String savePath, Boolean isReplace) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIFileUploadService.UploadFileHttpPostedFileBaseString">
            <summary>设置 IFileUploadService.UploadFile(HttpPostedFileBase postedFile, String savePath) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIFileUploadService.UploadFileHttpPostedFileBaseStringBoolean">
            <summary>设置 IFileUploadService.UploadFile(HttpPostedFileBase postedFile, String savePath, Boolean isReplace) 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubIHttpRequest">
            <summary>LoveBank.Common.IHttpRequest 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIHttpRequest.#ctor">
            <summary>初始化 type StubIHttpRequest 的新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIHttpRequest.lbc::LoveBank#Common#IHttpRequest#Request">
            <summary>设置 IHttpRequest.Request() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIHttpRequest.Request">
            <summary>设置 IHttpRequest.Request() 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubIPagedList">
            <summary>LoveBank.Common.IPagedList 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIPagedList.#ctor">
            <summary>初始化 type StubIPagedList 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList.FirstIndexOnPageGet">
            <summary>设置 IPagedList.get_FirstIndexOnPage() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList.FirstItemOnPageGet">
            <summary>设置 IPagedList.get_FirstItemOnPage() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList.HasNextPageGet">
            <summary>设置 IPagedList.get_HasNextPage() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList.HasPreviousPageGet">
            <summary>设置 IPagedList.get_HasPreviousPage() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList.IsFirstPageGet">
            <summary>设置 IPagedList.get_IsFirstPage() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList.IsLastPageGet">
            <summary>设置 IPagedList.get_IsLastPage() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList.LastIndexOnPageGet">
            <summary>设置 IPagedList.get_LastIndexOnPage() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList.LastItemOnPageGet">
            <summary>设置 IPagedList.get_LastItemOnPage() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList.PageCountGet">
            <summary>设置 IPagedList.get_PageCount() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList.PageIndexGet">
            <summary>设置 IPagedList.get_PageIndex() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList.PageNumberGet">
            <summary>设置 IPagedList.get_PageNumber() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList.PageSizeGet">
            <summary>设置 IPagedList.get_PageSize() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList.TotalItemCountGet">
            <summary>设置 IPagedList.get_TotalItemCount() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList.lbc::LoveBank#Common#IPagedList#FirstIndexOnPage">
            <summary>设置 IPagedList.get_FirstIndexOnPage() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList.lbc::LoveBank#Common#IPagedList#FirstItemOnPage">
            <summary>设置 IPagedList.get_FirstItemOnPage() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList.lbc::LoveBank#Common#IPagedList#HasNextPage">
            <summary>设置 IPagedList.get_HasNextPage() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList.lbc::LoveBank#Common#IPagedList#HasPreviousPage">
            <summary>设置 IPagedList.get_HasPreviousPage() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList.lbc::LoveBank#Common#IPagedList#IsFirstPage">
            <summary>设置 IPagedList.get_IsFirstPage() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList.lbc::LoveBank#Common#IPagedList#IsLastPage">
            <summary>设置 IPagedList.get_IsLastPage() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList.lbc::LoveBank#Common#IPagedList#LastIndexOnPage">
            <summary>设置 IPagedList.get_LastIndexOnPage() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList.lbc::LoveBank#Common#IPagedList#LastItemOnPage">
            <summary>设置 IPagedList.get_LastItemOnPage() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList.lbc::LoveBank#Common#IPagedList#PageCount">
            <summary>设置 IPagedList.get_PageCount() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList.lbc::LoveBank#Common#IPagedList#PageIndex">
            <summary>设置 IPagedList.get_PageIndex() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList.lbc::LoveBank#Common#IPagedList#PageNumber">
            <summary>设置 IPagedList.get_PageNumber() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList.lbc::LoveBank#Common#IPagedList#PageSize">
            <summary>设置 IPagedList.get_PageSize() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList.lbc::LoveBank#Common#IPagedList#TotalItemCount">
            <summary>设置 IPagedList.get_TotalItemCount() 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubIPagedList`1">
            <summary>LoveBank.Common.IPagedList`1 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIPagedList`1.#ctor">
            <summary>初始化 type StubIPagedList 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList`1.CountGet">
            <summary>设置 IPagedList`1.get_Count() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList`1.FirstIndexOnPageGet">
            <summary>设置 IPagedList.get_FirstIndexOnPage() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList`1.FirstItemOnPageGet">
            <summary>设置 IPagedList.get_FirstItemOnPage() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList`1.GetEnumerator">
            <summary>设置 IEnumerable`1.GetEnumerator() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList`1.GetEnumerator01">
            <summary>设置 IEnumerable.GetEnumerator() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList`1.HasNextPageGet">
            <summary>设置 IPagedList.get_HasNextPage() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList`1.HasPreviousPageGet">
            <summary>设置 IPagedList.get_HasPreviousPage() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList`1.IsFirstPageGet">
            <summary>设置 IPagedList.get_IsFirstPage() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList`1.IsLastPageGet">
            <summary>设置 IPagedList.get_IsLastPage() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList`1.ItemGetInt32">
            <summary>设置 IPagedList`1.get_Item(Int32 index) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList`1.LastIndexOnPageGet">
            <summary>设置 IPagedList.get_LastIndexOnPage() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList`1.LastItemOnPageGet">
            <summary>设置 IPagedList.get_LastItemOnPage() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList`1.PageCountGet">
            <summary>设置 IPagedList.get_PageCount() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList`1.PageIndexGet">
            <summary>设置 IPagedList.get_PageIndex() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList`1.PageNumberGet">
            <summary>设置 IPagedList.get_PageNumber() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList`1.PageSizeGet">
            <summary>设置 IPagedList.get_PageSize() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIPagedList`1.global::System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>设置 IEnumerable`1.GetEnumerator() 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIPagedList`1.global::System#Collections#IEnumerable#GetEnumerator">
            <summary>设置 IEnumerable.GetEnumerator() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIPagedList`1.TotalItemCountGet">
            <summary>设置 IPagedList.get_TotalItemCount() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList`1.lbc::LoveBank#Common#IPagedList{T}#Count">
            <summary>设置 IPagedList`1.get_Count() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList`1.lbc::LoveBank#Common#IPagedList#FirstIndexOnPage">
            <summary>设置 IPagedList.get_FirstIndexOnPage() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList`1.lbc::LoveBank#Common#IPagedList#FirstItemOnPage">
            <summary>设置 IPagedList.get_FirstItemOnPage() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList`1.lbc::LoveBank#Common#IPagedList#HasNextPage">
            <summary>设置 IPagedList.get_HasNextPage() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList`1.lbc::LoveBank#Common#IPagedList#HasPreviousPage">
            <summary>设置 IPagedList.get_HasPreviousPage() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList`1.lbc::LoveBank#Common#IPagedList#IsFirstPage">
            <summary>设置 IPagedList.get_IsFirstPage() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList`1.lbc::LoveBank#Common#IPagedList#IsLastPage">
            <summary>设置 IPagedList.get_IsLastPage() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList`1.LoveBank#Common#IPagedList{T}#Item(System.Int32)">
            <summary>设置 IPagedList`1.get_Item(Int32 index) 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList`1.lbc::LoveBank#Common#IPagedList#LastIndexOnPage">
            <summary>设置 IPagedList.get_LastIndexOnPage() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList`1.lbc::LoveBank#Common#IPagedList#LastItemOnPage">
            <summary>设置 IPagedList.get_LastItemOnPage() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList`1.lbc::LoveBank#Common#IPagedList#PageCount">
            <summary>设置 IPagedList.get_PageCount() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList`1.lbc::LoveBank#Common#IPagedList#PageIndex">
            <summary>设置 IPagedList.get_PageIndex() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList`1.lbc::LoveBank#Common#IPagedList#PageNumber">
            <summary>设置 IPagedList.get_PageNumber() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList`1.lbc::LoveBank#Common#IPagedList#PageSize">
            <summary>设置 IPagedList.get_PageSize() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIPagedList`1.lbc::LoveBank#Common#IPagedList#TotalItemCount">
            <summary>设置 IPagedList.get_TotalItemCount() 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubIServiceInjector">
            <summary>LoveBank.Common.IServiceInjector 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIServiceInjector.#ctor">
            <summary>初始化 type StubIServiceInjector 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIServiceInjector.InjectObject">
            <summary>设置 IServiceInjector.Inject(Object instance) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIServiceInjector.lbc::LoveBank#Common#IServiceInjector#Inject(System.Object)">
            <summary>设置 IServiceInjector.Inject(Object instance) 的 存根</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubIServiceRegister">
            <summary>LoveBank.Common.IServiceRegister 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIServiceRegister.#ctor">
            <summary>初始化 type StubIServiceRegister 的新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIServiceRegister.lbc::LoveBank#Common#IServiceRegister#RegisterInstance(System.String,System.Type,System.Object)">
            <summary>设置 IServiceRegister.RegisterInstance(String key, Type serviceType, Object instance) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIServiceRegister.lbc::LoveBank#Common#IServiceRegister#RegisterType``1(System.String,System.Func{LoveBank.Common.IServiceResolver,``0},LoveBank.Common.LifetimeType)">
            <summary>设置 IServiceRegister.RegisterType(String key, Func`2&lt;IServiceResolver,!!0&gt; constructFactory, LifetimeType lifetime) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIServiceRegister.lbc::LoveBank#Common#IServiceRegister#RegisterType(System.String,System.Type,System.Type,LoveBank.Common.LifetimeType)">
            <summary>设置 IServiceRegister.RegisterType(String key, Type serviceType, Type implementationType, LifetimeType lifetime) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIServiceRegister.RegisterInstanceStringTypeObject">
            <summary>设置 IServiceRegister.RegisterInstance(String key, Type serviceType, Object instance) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIServiceRegister.RegisterTypeOf1StringFuncOfIServiceResolverM0LifetimeType``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Func{LoveBank.Common.IServiceResolver,``0},LoveBank.Common.LifetimeType,LoveBank.Common.IServiceRegister})">
            <summary>设置 RegisterType(String key, Func`2&lt;IServiceResolver,!!0&gt; constructFactory, LifetimeType lifetime) 的存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIServiceRegister.RegisterTypeStringTypeTypeLifetimeType">
            <summary>设置 IServiceRegister.RegisterType(String key, Type serviceType, Type implementationType, LifetimeType lifetime) 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubIServiceResolver">
            <summary>LoveBank.Common.IServiceResolver 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIServiceResolver.#ctor">
            <summary>初始化 type StubIServiceResolver 的新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIServiceResolver.lbc::LoveBank#Common#IServiceResolver#Resolve(System.Type)">
            <summary>设置 IServiceResolver.Resolve(Type serviceType) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIServiceResolver.lbc::LoveBank#Common#IServiceResolver#Resolve(System.Type,System.String)">
            <summary>设置 IServiceResolver.Resolve(Type serviceType, String key) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIServiceResolver.lbc::LoveBank#Common#IServiceResolver#ResolveAll(System.Type)">
            <summary>设置 IServiceResolver.ResolveAll(Type serviceType) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIServiceResolver.ResolveAllType">
            <summary>设置 IServiceResolver.ResolveAll(Type serviceType) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIServiceResolver.ResolveType">
            <summary>设置 IServiceResolver.Resolve(Type serviceType) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubIServiceResolver.ResolveTypeString">
            <summary>设置 IServiceResolver.Resolve(Type serviceType, String key) 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubIoC">
            <summary>LoveBank.Common.IoC 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIoC.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubIoC.InitializeStub">
            <summary>初始化 type StubIoC 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIoC.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIoC.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubIoC.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubJsonMessage">
            <summary>LoveBank.Common.JsonMessage 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubJsonMessage.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubJsonMessage.#ctor(System.Boolean)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubJsonMessage.#ctor(System.Boolean,System.Object)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubJsonMessage.#ctor(System.Boolean,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubJsonMessage.#ctor(System.Boolean,System.String,System.Object)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubJsonMessage.InitializeStub">
            <summary>初始化 type StubJsonMessage 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubJsonMessage.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubJsonMessage.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubJsonMessage.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubJsonPageList`1">
            <summary>LoveBank.Common.JsonPageList`1 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubJsonPageList`1.#ctor(System.Int32,System.Collections.Generic.List{`0})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubJsonPageList`1.InitializeStub">
            <summary>初始化 type StubJsonPageList 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubJsonPageList`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubJsonPageList`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubJsonPageList`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubLocalizableAttribute">
            <summary>LoveBank.Common.LocalizableAttribute 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubLocalizableAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubLocalizableAttribute.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubLocalizableAttribute.#ctor(System.Type,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubLocalizableAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubLocalizableAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubLocalizableAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubLocalizableAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubLocalizableAttribute.InitializeStub">
            <summary>初始化 type StubLocalizableAttribute 的新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubLocalizableAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubLocalizableAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubLocalizableAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubLocalizableAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubLocalizableAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubLocalizableAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubLocalizableAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubLocalizableAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubLocalizableAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubPagedList`1">
            <summary>LoveBank.Common.PagedList`1 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubPagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubPagedList`1.InitializeStub">
            <summary>初始化 type StubPagedList 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubPagedList`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubPagedList`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubPagedList`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubParamCollection">
            <summary>LoveBank.Common.ParamCollection 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubParamCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubParamCollection.#ctor(System.Collections.Generic.IEnumerable{LoveBank.Common.ParamPair})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubParamCollection.ClearItems">
            <summary>设置 Collection`1.ClearItems() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubParamCollection.ClearItems01">
            <summary>设置 Collection`1.ClearItems() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubParamCollection.InitializeStub">
            <summary>初始化 type StubParamCollection 的新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubParamCollection.InsertItem(System.Int32,LoveBank.Common.ParamPair)">
            <summary>设置 Collection`1.InsertItem(Int32 index, !0 item) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubParamCollection.InsertItemInt32ParamPair">
            <summary>设置 Collection`1.InsertItem(Int32 index, !0 item) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubParamCollection.RemoveItem(System.Int32)">
            <summary>设置 Collection`1.RemoveItem(Int32 index) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubParamCollection.RemoveItemInt32">
            <summary>设置 Collection`1.RemoveItem(Int32 index) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubParamCollection.SetItem(System.Int32,LoveBank.Common.ParamPair)">
            <summary>设置 Collection`1.SetItem(Int32 index, !0 item) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Fakes.StubParamCollection.SetItemInt32ParamPair">
            <summary>设置 Collection`1.SetItem(Int32 index, !0 item) 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubParamCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubParamCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubParamCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubParamPair">
            <summary>LoveBank.Common.ParamPair 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubParamPair.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubParamPair.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubParamPair.InitializeStub">
            <summary>初始化 type StubParamPair 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubParamPair.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubParamPair.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubParamPair.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubStaticPagedList`1">
            <summary>LoveBank.Common.StaticPagedList`1 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubStaticPagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubStaticPagedList`1.InitializeStub">
            <summary>初始化 type StubStaticPagedList 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubStaticPagedList`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubStaticPagedList`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubStaticPagedList`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Fakes.StubUtils">
            <summary>LoveBank.Common.Utils 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubUtils.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Fakes.StubUtils.InitializeStub">
            <summary>初始化 type StubUtils 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubUtils.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubUtils.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Fakes.StubUtils.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Finance.Fakes.ShimEcanRMB">
            <summary>LoveBank.Common.Finance.EcanRMB 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Finance.Fakes.ShimEcanRMB.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Finance.Fakes.ShimEcanRMB.#ctor(LoveBank.Common.Finance.EcanRMB)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Finance.Fakes.ShimEcanRMB.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Finance.Fakes.ShimEcanRMB.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Finance.Fakes.ShimEcanRMB.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Finance.Fakes.ShimEcanRMB.CmycurDDecimal">
            <summary>设置 EcanRMB.CmycurD(Decimal num) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Finance.Fakes.ShimEcanRMB.Constructor">
            <summary>设置 EcanRMB.EcanRMB() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Finance.Fakes.ShimEcanRMB.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Finance.Fakes.ShimEcanRMB.AllInstances.CmycurDDecimal">
            <summary>设置 EcanRMB.CmycurD(Decimal num) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Finance.Fakes.ShimEcanRMBExtension">
            <summary>LoveBank.Common.Finance.EcanRMBExtension 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Finance.Fakes.ShimEcanRMBExtension.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Finance.Fakes.ShimEcanRMBExtension.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Finance.Fakes.ShimEcanRMBExtension.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Finance.Fakes.ShimEcanRMBExtension.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Finance.Fakes.ShimEcanRMBExtension.ToChienesMoneyDecimal">
            <summary>设置 EcanRMBExtension.ToChienesMoney(Decimal num) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Finance.Fakes.ShimInterestAlgorithm">
            <summary>LoveBank.Common.Finance.InterestAlgorithm 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Finance.Fakes.ShimInterestAlgorithm.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Finance.Fakes.ShimInterestAlgorithm.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Finance.Fakes.ShimInterestAlgorithm.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Finance.Fakes.ShimInterestAlgorithm.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Finance.Fakes.ShimInterestAlgorithm.DailyInterestInt32DecimalDouble">
            <summary>设置 InterestAlgorithm.DailyInterest(Int32 day, Decimal money, Double annualRate) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Finance.Fakes.ShimInterestAlgorithm.MonthInterestDecimalDouble">
            <summary>设置 InterestAlgorithm.MonthInterest(Decimal money, Double annualRate) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Finance.Fakes.StubEcanRMB">
            <summary>LoveBank.Common.Finance.EcanRMB 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Finance.Fakes.StubEcanRMB.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Finance.Fakes.StubEcanRMB.InitializeStub">
            <summary>初始化 type StubEcanRMB 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Finance.Fakes.StubEcanRMB.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Finance.Fakes.StubEcanRMB.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Finance.Fakes.StubEcanRMB.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Email.Fakes.ShimEmailSender">
            <summary>LoveBank.Common.Plugins.Email.EmailSender 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Email.Fakes.ShimEmailSender.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Email.Fakes.ShimEmailSender.#ctor(LoveBank.Common.Plugins.Email.EmailSender)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Email.Fakes.ShimEmailSender.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Email.Fakes.ShimEmailSender.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Email.Fakes.ShimEmailSender.Bind(LoveBank.Common.Plugins.Email.IEmailSender)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimEmailSender.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimEmailSender.BuildMessageWithStringStringString">
            <summary>设置 EmailSender.BuildMessageWith(String toAddress, String subject, String body) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimEmailSender.ConstructorStringInt32StringStringStringBoolean">
            <summary>设置 EmailSender.EmailSender(String host, Int32 port, String name, String account, String password, Boolean ssl) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimEmailSender.SendMailMailMessageObjectCompletedCallback">
            <summary>设置 EmailSender.SendMail(MailMessage message, Object userToken, CompletedCallback callback) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimEmailSender.SendMailStringStringString">
            <summary>设置 EmailSender.SendMail(String email, String title, String body) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimEmailSender.SendMailStringStringStringObjectCompletedCallback">
            <summary>设置 EmailSender.SendMail(String email, String title, String body, Object userToken, CompletedCallback callback) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Email.Fakes.ShimEmailSender.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimEmailSender.AllInstances.BuildMessageWithStringStringString">
            <summary>设置 EmailSender.BuildMessageWith(String toAddress, String subject, String body) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimEmailSender.AllInstances.SendMailMailMessageObjectCompletedCallback">
            <summary>设置 EmailSender.SendMail(MailMessage message, Object userToken, CompletedCallback callback) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimEmailSender.AllInstances.SendMailStringStringString">
            <summary>设置 EmailSender.SendMail(String email, String title, String body) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimEmailSender.AllInstances.SendMailStringStringStringObjectCompletedCallback">
            <summary>设置 EmailSender.SendMail(String email, String title, String body, Object userToken, CompletedCallback callback) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp">
            <summary>LoveBank.Common.Plugins.Email.Smtp 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp.#ctor(LoveBank.Common.Plugins.Email.Smtp)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp.AddClientCertificateX509Certificate">
            <summary>设置 Smtp.AddClientCertificate(X509Certificate certificate) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp.ConstructorStringInt32BooleanBoolean">
            <summary>设置 Smtp.Smtp(String host, Int32 port, Boolean enableSsl, Boolean useDefaultCredentials) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp.ConstructorStringInt32BooleanNetworkCredential">
            <summary>设置 Smtp.Smtp(String host, Int32 port, Boolean enableSsl, NetworkCredential credential) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp.ConstructorStringInt32BooleanStringString">
            <summary>设置 Smtp.Smtp(String host, Int32 port, Boolean enableSsl, String userName, String password) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp.SetDeliveryMethodInt32">
            <summary>设置 Smtp.SetDeliveryMethod(Int32 deliveryMethod) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp.SetTimeoutInt32">
            <summary>设置 Smtp.SetTimeout(Int32 timeout) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp.SmtpClientGet">
            <summary>设置 Smtp.get_SmtpClient() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp.SmtpClientSetSmtpClient">
            <summary>设置 Smtp.set_SmtpClient(SmtpClient value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp.AllInstances.AddClientCertificateX509Certificate">
            <summary>设置 Smtp.AddClientCertificate(X509Certificate certificate) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp.AllInstances.SetDeliveryMethodInt32">
            <summary>设置 Smtp.SetDeliveryMethod(Int32 deliveryMethod) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp.AllInstances.SetTimeoutInt32">
            <summary>设置 Smtp.SetTimeout(Int32 timeout) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp.AllInstances.SmtpClientGet">
            <summary>设置 Smtp.get_SmtpClient() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.ShimSmtp.AllInstances.SmtpClientSetSmtpClient">
            <summary>设置 Smtp.set_SmtpClient(SmtpClient value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Email.Fakes.StubEmailSender">
            <summary>LoveBank.Common.Plugins.Email.EmailSender 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Email.Fakes.StubEmailSender.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Email.Fakes.StubEmailSender.InitializeStub">
            <summary>初始化 type StubEmailSender 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.StubEmailSender.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.StubEmailSender.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.StubEmailSender.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Email.Fakes.StubIEmailSender">
            <summary>LoveBank.Common.Plugins.Email.IEmailSender 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Email.Fakes.StubIEmailSender.#ctor">
            <summary>初始化 type StubIEmailSender 的新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Email.Fakes.StubIEmailSender.lbc::LoveBank#Common#Plugins#Email#IEmailSender#SendMail(System.String,System.String,System.String)">
            <summary>设置 IEmailSender.SendMail(String email, String title, String body) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Email.Fakes.StubIEmailSender.lbc::LoveBank#Common#Plugins#Email#IEmailSender#SendMail(System.String,System.String,System.String,System.Object,LoveBank.Common.Plugins.CompletedCallback)">
            <summary>设置 IEmailSender.SendMail(String email, String title, String body, Object userToken, CompletedCallback callback) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Email.Fakes.StubIEmailSender.SendMailStringStringString">
            <summary>设置 IEmailSender.SendMail(String email, String title, String body) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Email.Fakes.StubIEmailSender.SendMailStringStringStringObjectCompletedCallback">
            <summary>设置 IEmailSender.SendMail(String email, String title, String body, Object userToken, CompletedCallback callback) 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Email.Fakes.StubSmtp">
            <summary>LoveBank.Common.Plugins.Email.Smtp 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Email.Fakes.StubSmtp.#ctor(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Email.Fakes.StubSmtp.#ctor(System.String,System.Int32,System.Boolean,System.Net.NetworkCredential)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Email.Fakes.StubSmtp.#ctor(System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Email.Fakes.StubSmtp.InitializeStub">
            <summary>初始化 type StubSmtp 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.StubSmtp.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.StubSmtp.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Email.Fakes.StubSmtp.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment">
            <summary>LoveBank.Common.Plugins.AbstractPayment 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.#ctor(LoveBank.Common.Plugins.AbstractPayment)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.Bind(LoveBank.Common.Plugins.IPayment)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.Bind(LoveBank.Common.Plugins.IPlugins)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.ConfigGet">
            <summary>设置 AbstractPayment.get_Config() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.ConfigSetIDictionaryOfStringPaymentConfig">
            <summary>设置 AbstractPayment.set_Config(IDictionary`2&lt;String,PaymentConfig&gt; value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.Constructor">
            <summary>设置 AbstractPayment.AbstractPayment() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.CreateFieldStringString">
            <summary>设置 AbstractPayment.CreateField(String name, String strValue) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.CreateFormStringString">
            <summary>设置 AbstractPayment.CreateForm(String content, String action) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.DescriptionGet">
            <summary>设置 AbstractPayment.get_Description() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.DescriptionSetString">
            <summary>设置 AbstractPayment.set_Description(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.FeeAmountGet">
            <summary>设置 AbstractPayment.get_FeeAmount() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.FeeAmountSetDecimal">
            <summary>设置 AbstractPayment.set_FeeAmount(Decimal value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.FeeTypeGet">
            <summary>设置 AbstractPayment.get_FeeType() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.FeeTypeSetInt32">
            <summary>设置 AbstractPayment.set_FeeType(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.FinishedAddEventHandler">
            <summary>设置 AbstractPayment.add_Finished(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.FinishedRemoveEventHandler">
            <summary>设置 AbstractPayment.remove_Finished(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.IsEffectGet">
            <summary>设置 AbstractPayment.get_IsEffect() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.IsEffectSetBoolean">
            <summary>设置 AbstractPayment.set_IsEffect(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.LogoGet">
            <summary>设置 AbstractPayment.get_Logo() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.LogoSetString">
            <summary>设置 AbstractPayment.set_Logo(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.NotifyVerifyFaildAddEventHandler">
            <summary>设置 AbstractPayment.add_NotifyVerifyFaild(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.NotifyVerifyFaildRemoveEventHandler">
            <summary>设置 AbstractPayment.remove_NotifyVerifyFaild(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.OnFinishedPaymentOrder">
            <summary>设置 AbstractPayment.OnFinished(PaymentOrder order) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.OnNotifyVerifyFaildPaymentOrder">
            <summary>设置 AbstractPayment.OnNotifyVerifyFaild(PaymentOrder order) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.OnPaymentPaymentOrder">
            <summary>设置 AbstractPayment.OnPayment(PaymentOrder order) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.OnlinePalyGet">
            <summary>设置 AbstractPayment.get_OnlinePaly() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.OnlinePalySetBoolean">
            <summary>设置 AbstractPayment.set_OnlinePaly(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.PaymentAddEventHandler">
            <summary>设置 AbstractPayment.add_Payment(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.PaymentRemoveEventHandler">
            <summary>设置 AbstractPayment.remove_Payment(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.SortGet">
            <summary>设置 AbstractPayment.get_Sort() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.SortSetInt32">
            <summary>设置 AbstractPayment.set_Sort(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.SubmitPaymentFormString">
            <summary>设置 AbstractPayment.SubmitPaymentForm(String formContent) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.ConfigGet">
            <summary>设置 AbstractPayment.get_Config() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.ConfigSetIDictionaryOfStringPaymentConfig">
            <summary>设置 AbstractPayment.set_Config(IDictionary`2&lt;String,PaymentConfig&gt; value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.CreateFieldStringString">
            <summary>设置 AbstractPayment.CreateField(String name, String strValue) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.CreateFormStringString">
            <summary>设置 AbstractPayment.CreateForm(String content, String action) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.DescriptionGet">
            <summary>设置 AbstractPayment.get_Description() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.DescriptionSetString">
            <summary>设置 AbstractPayment.set_Description(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.FeeAmountGet">
            <summary>设置 AbstractPayment.get_FeeAmount() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.FeeAmountSetDecimal">
            <summary>设置 AbstractPayment.set_FeeAmount(Decimal value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.FeeTypeGet">
            <summary>设置 AbstractPayment.get_FeeType() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.FeeTypeSetInt32">
            <summary>设置 AbstractPayment.set_FeeType(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.FinishedAddEventHandler">
            <summary>设置 AbstractPayment.add_Finished(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.FinishedRemoveEventHandler">
            <summary>设置 AbstractPayment.remove_Finished(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.IsEffectGet">
            <summary>设置 AbstractPayment.get_IsEffect() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.IsEffectSetBoolean">
            <summary>设置 AbstractPayment.set_IsEffect(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.LogoGet">
            <summary>设置 AbstractPayment.get_Logo() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.LogoSetString">
            <summary>设置 AbstractPayment.set_Logo(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.NotifyVerifyFaildAddEventHandler">
            <summary>设置 AbstractPayment.add_NotifyVerifyFaild(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.NotifyVerifyFaildRemoveEventHandler">
            <summary>设置 AbstractPayment.remove_NotifyVerifyFaild(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.OnFinishedPaymentOrder">
            <summary>设置 AbstractPayment.OnFinished(PaymentOrder order) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.OnNotifyVerifyFaildPaymentOrder">
            <summary>设置 AbstractPayment.OnNotifyVerifyFaild(PaymentOrder order) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.OnPaymentPaymentOrder">
            <summary>设置 AbstractPayment.OnPayment(PaymentOrder order) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.OnlinePalyGet">
            <summary>设置 AbstractPayment.get_OnlinePaly() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.OnlinePalySetBoolean">
            <summary>设置 AbstractPayment.set_OnlinePaly(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.PaymentAddEventHandler">
            <summary>设置 AbstractPayment.add_Payment(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.PaymentRemoveEventHandler">
            <summary>设置 AbstractPayment.remove_Payment(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.SortGet">
            <summary>设置 AbstractPayment.get_Sort() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.SortSetInt32">
            <summary>设置 AbstractPayment.set_Sort(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimAbstractPayment.AllInstances.SubmitPaymentFormString">
            <summary>设置 AbstractPayment.SubmitPaymentForm(String formContent) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup">
            <summary>LoveBank.Common.Plugins.CheckBoxGroup 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.#ctor(LoveBank.Common.Plugins.CheckBoxGroup)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.Bind(System.Collections.IDictionary)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.Bind(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,LoveBank.Common.Plugins.CheckBoxItem}})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.Bind(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,LoveBank.Common.Plugins.CheckBoxItem}})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.Bind(System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{System.String,LoveBank.Common.Plugins.CheckBoxItem}})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.Bind(System.Collections.Generic.IDictionary{System.String,LoveBank.Common.Plugins.CheckBoxItem})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.Bind(System.Collections.Generic.IReadOnlyDictionary{System.String,LoveBank.Common.Plugins.CheckBoxItem})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.Bind(System.Runtime.Serialization.IDeserializationCallback)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.AddStringString">
            <summary>设置 CheckBoxGroup.Add(String key, String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.Constructor">
            <summary>设置 CheckBoxGroup.CheckBoxGroup() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.SetCheckedStringBoolean">
            <summary>设置 CheckBoxGroup.SetChecked(String key, Boolean isSelect) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.AllInstances.AddStringString">
            <summary>设置 CheckBoxGroup.Add(String key, String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxGroup.AllInstances.SetCheckedStringBoolean">
            <summary>设置 CheckBoxGroup.SetChecked(String key, Boolean isSelect) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem">
            <summary>LoveBank.Common.Plugins.CheckBoxItem 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.#ctor(LoveBank.Common.Plugins.CheckBoxItem)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.CheckedGet">
            <summary>设置 CheckBoxItem.get_Checked() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.CheckedSetBoolean">
            <summary>设置 CheckBoxItem.set_Checked(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.Constructor">
            <summary>设置 CheckBoxItem.CheckBoxItem() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.ConstructorStringString">
            <summary>设置 CheckBoxItem.CheckBoxItem(String key, String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.KeyGet">
            <summary>设置 CheckBoxItem.get_Key() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.KeySetString">
            <summary>设置 CheckBoxItem.set_Key(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.ValueGet">
            <summary>设置 CheckBoxItem.get_Value() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.ValueSetString">
            <summary>设置 CheckBoxItem.set_Value(String value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.AllInstances.CheckedGet">
            <summary>设置 CheckBoxItem.get_Checked() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.AllInstances.CheckedSetBoolean">
            <summary>设置 CheckBoxItem.set_Checked(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.AllInstances.KeyGet">
            <summary>设置 CheckBoxItem.get_Key() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.AllInstances.KeySetString">
            <summary>设置 CheckBoxItem.set_Key(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.AllInstances.ValueGet">
            <summary>设置 CheckBoxItem.get_Value() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimCheckBoxItem.AllInstances.ValueSetString">
            <summary>设置 CheckBoxItem.set_Value(String value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig">
            <summary>LoveBank.Common.Plugins.PaymentConfig 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.#ctor(LoveBank.Common.Plugins.PaymentConfig)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.Constructor">
            <summary>设置 PaymentConfig.PaymentConfig() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.ConstructorStringInt32">
            <summary>设置 PaymentConfig.PaymentConfig(String title, Int32 input) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.ConstructorStringInt32Object">
            <summary>设置 PaymentConfig.PaymentConfig(String title, Int32 input, Object value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.InputTypeGet">
            <summary>设置 PaymentConfig.get_InputType() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.InputTypeSetInt32">
            <summary>设置 PaymentConfig.set_InputType(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.TitleGet">
            <summary>设置 PaymentConfig.get_Title() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.TitleSetString">
            <summary>设置 PaymentConfig.set_Title(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.ValuesGet">
            <summary>设置 PaymentConfig.get_Values() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.ValuesSetObject">
            <summary>设置 PaymentConfig.set_Values(Object value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.AllInstances.InputTypeGet">
            <summary>设置 PaymentConfig.get_InputType() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.AllInstances.InputTypeSetInt32">
            <summary>设置 PaymentConfig.set_InputType(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.AllInstances.TitleGet">
            <summary>设置 PaymentConfig.get_Title() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.AllInstances.TitleSetString">
            <summary>设置 PaymentConfig.set_Title(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.AllInstances.ValuesGet">
            <summary>设置 PaymentConfig.get_Values() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentConfig.AllInstances.ValuesSetObject">
            <summary>设置 PaymentConfig.set_Values(Object value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimPaymentManager">
            <summary>LoveBank.Common.Plugins.PaymentManager 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimPaymentManager.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimPaymentManager.#ctor(LoveBank.Common.Plugins.PaymentManager)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimPaymentManager.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimPaymentManager.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimPaymentManager.Bind(LoveBank.Common.Plugins.IPluginsService{LoveBank.Common.Plugins.IPayment})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentManager.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentManager.Constructor">
            <summary>设置 PaymentManager.PaymentManager() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentManager.InstallPluginsString">
            <summary>设置 PaymentManager.InstallPlugins(String key) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentManager.UninstallPluginsString">
            <summary>设置 PaymentManager.UninstallPlugins(String key) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimPaymentManager.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentManager.AllInstances.InstallPluginsString">
            <summary>设置 PaymentManager.InstallPlugins(String key) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentManager.AllInstances.UninstallPluginsString">
            <summary>设置 PaymentManager.UninstallPlugins(String key) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder">
            <summary>LoveBank.Common.Plugins.PaymentOrder 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.#ctor(LoveBank.Common.Plugins.PaymentOrder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.BankCodeGet">
            <summary>设置 PaymentOrder.get_BankCode() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.BankCodeSetString">
            <summary>设置 PaymentOrder.set_BankCode(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.Constructor">
            <summary>设置 PaymentOrder.PaymentOrder() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.DescriptionGet">
            <summary>设置 PaymentOrder.get_Description() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.DescriptionSetString">
            <summary>设置 PaymentOrder.set_Description(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.MoneyGet">
            <summary>设置 PaymentOrder.get_Money() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.MoneySetDecimal">
            <summary>设置 PaymentOrder.set_Money(Decimal value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.NoticeUrlGet">
            <summary>设置 PaymentOrder.get_NoticeUrl() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.NoticeUrlSetString">
            <summary>设置 PaymentOrder.set_NoticeUrl(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.PaymentNoGet">
            <summary>设置 PaymentOrder.get_PaymentNo() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.PaymentNoSetString">
            <summary>设置 PaymentOrder.set_PaymentNo(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.ReturnUrlGet">
            <summary>设置 PaymentOrder.get_ReturnUrl() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.ReturnUrlSetString">
            <summary>设置 PaymentOrder.set_ReturnUrl(String value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.AllInstances.BankCodeGet">
            <summary>设置 PaymentOrder.get_BankCode() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.AllInstances.BankCodeSetString">
            <summary>设置 PaymentOrder.set_BankCode(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.AllInstances.DescriptionGet">
            <summary>设置 PaymentOrder.get_Description() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.AllInstances.DescriptionSetString">
            <summary>设置 PaymentOrder.set_Description(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.AllInstances.MoneyGet">
            <summary>设置 PaymentOrder.get_Money() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.AllInstances.MoneySetDecimal">
            <summary>设置 PaymentOrder.set_Money(Decimal value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.AllInstances.NoticeUrlGet">
            <summary>设置 PaymentOrder.get_NoticeUrl() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.AllInstances.NoticeUrlSetString">
            <summary>设置 PaymentOrder.set_NoticeUrl(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.AllInstances.PaymentNoGet">
            <summary>设置 PaymentOrder.get_PaymentNo() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.AllInstances.PaymentNoSetString">
            <summary>设置 PaymentOrder.set_PaymentNo(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.AllInstances.ReturnUrlGet">
            <summary>设置 PaymentOrder.get_ReturnUrl() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPaymentOrder.AllInstances.ReturnUrlSetString">
            <summary>设置 PaymentOrder.set_ReturnUrl(String value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimPluginService`1">
            <summary>LoveBank.Common.Plugins.PluginService`1 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimPluginService`1.#ctor(LoveBank.Common.Plugins.PluginService{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimPluginService`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimPluginService`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimPluginService`1.Bind(LoveBank.Common.Plugins.IPluginsService{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPluginService`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPluginService`1.Constructor">
            <summary>设置 PluginService`1.PluginService`1() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPluginService`1.GetPluginsStringObjectArray">
            <summary>设置 PluginService`1.GetPlugins(String key, Object[] para) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPluginService`1.LoadPlugins">
            <summary>设置 PluginService`1.LoadPlugins() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPluginService`1.ReadPlugins">
            <summary>设置 PluginService`1.ReadPlugins() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPluginService`1._LoadPluginsb__4Type">
            <summary>设置 PluginService`1.&lt;LoadPlugins&gt;b__4(Type type) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPluginService`1._LoadPluginsb__5Type">
            <summary>设置 PluginService`1.&lt;LoadPlugins&gt;b__5(Type x) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPluginService`1._ReadPluginsb__0Type">
            <summary>设置 PluginService`1.&lt;ReadPlugins&gt;b__0(Type o) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPluginService`1._ReadPluginsb__1Type">
            <summary>设置 PluginService`1.&lt;ReadPlugins&gt;b__1(Type x) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimPluginService`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPluginService`1.AllInstances.GetPluginsStringObjectArray">
            <summary>设置 PluginService`1.GetPlugins(String key, Object[] para) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPluginService`1.AllInstances.LoadPlugins">
            <summary>设置 PluginService`1.LoadPlugins() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimPluginService`1.AllInstances.ReadPlugins">
            <summary>设置 PluginService`1.ReadPlugins() 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2">
            <summary>LoveBank.Common.Plugins.SerializableDictionary`2 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.#ctor(LoveBank.Common.Plugins.SerializableDictionary{`0,`1})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.Bind(System.Xml.Serialization.IXmlSerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.Bind(System.Collections.IDictionary)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.Bind(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.Bind(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.Bind(System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.Bind(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.Bind(System.Collections.Generic.IReadOnlyDictionary{`0,`1})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.Bind(System.Runtime.Serialization.IDeserializationCallback)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.Constructor">
            <summary>设置 SerializableDictionary`2.SerializableDictionary`2() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.ConstructorIEnumerableOfKeyValuePairOfT0T1">
            <summary>设置 SerializableDictionary`2.SerializableDictionary`2(IEnumerable`1&lt;KeyValuePair`2&lt;!0,!1&gt;&gt; old) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.GetSchema">
            <summary>设置 SerializableDictionary`2.GetSchema() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.ReadXmlXmlReader">
            <summary>设置 SerializableDictionary`2.ReadXml(XmlReader reader) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.WriteXmlXmlWriter">
            <summary>设置 SerializableDictionary`2.WriteXml(XmlWriter writer) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.AllInstances.GetSchema">
            <summary>设置 SerializableDictionary`2.GetSchema() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.AllInstances.ReadXmlXmlReader">
            <summary>设置 SerializableDictionary`2.ReadXml(XmlReader reader) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSerializableDictionary`2.AllInstances.WriteXmlXmlWriter">
            <summary>设置 SerializableDictionary`2.WriteXml(XmlWriter writer) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimSmsInfo">
            <summary>LoveBank.Common.Plugins.SmsInfo 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.#ctor(LoveBank.Common.Plugins.SmsInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ClassNameGet">
            <summary>设置 SmsInfo.get_ClassName() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ClassNameSetString">
            <summary>设置 SmsInfo.set_ClassName(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ConfigGet">
            <summary>设置 SmsInfo.get_Config() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ConfigSetDictionaryOfStringSmsInfoSmsConfig">
            <summary>设置 SmsInfo.set_Config(Dictionary`2&lt;String,SmsConfig&gt; value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.Constructor">
            <summary>设置 SmsInfo.SmsInfo() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.PwdGet">
            <summary>设置 SmsInfo.get_Pwd() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.PwdSetString">
            <summary>设置 SmsInfo.set_Pwd(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ServerNameGet">
            <summary>设置 SmsInfo.get_ServerName() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ServerNameSetString">
            <summary>设置 SmsInfo.set_ServerName(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ServerUrlGet">
            <summary>设置 SmsInfo.get_ServerUrl() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ServerUrlSetString">
            <summary>设置 SmsInfo.set_ServerUrl(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.SmsLangGet">
            <summary>设置 SmsInfo.get_SmsLang() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.SmsLangSetDictionaryOfStringString">
            <summary>设置 SmsInfo.set_SmsLang(Dictionary`2&lt;String,String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.UserNameGet">
            <summary>设置 SmsInfo.get_UserName() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.UserNameSetString">
            <summary>设置 SmsInfo.set_UserName(String value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.AllInstances.ClassNameGet">
            <summary>设置 SmsInfo.get_ClassName() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.AllInstances.ClassNameSetString">
            <summary>设置 SmsInfo.set_ClassName(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.AllInstances.ConfigGet">
            <summary>设置 SmsInfo.get_Config() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.AllInstances.ConfigSetDictionaryOfStringSmsInfoSmsConfig">
            <summary>设置 SmsInfo.set_Config(Dictionary`2&lt;String,SmsConfig&gt; value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.AllInstances.PwdGet">
            <summary>设置 SmsInfo.get_Pwd() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.AllInstances.PwdSetString">
            <summary>设置 SmsInfo.set_Pwd(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.AllInstances.ServerNameGet">
            <summary>设置 SmsInfo.get_ServerName() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.AllInstances.ServerNameSetString">
            <summary>设置 SmsInfo.set_ServerName(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.AllInstances.ServerUrlGet">
            <summary>设置 SmsInfo.get_ServerUrl() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.AllInstances.ServerUrlSetString">
            <summary>设置 SmsInfo.set_ServerUrl(String value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.AllInstances.SmsLangGet">
            <summary>设置 SmsInfo.get_SmsLang() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.AllInstances.SmsLangSetDictionaryOfStringString">
            <summary>设置 SmsInfo.set_SmsLang(Dictionary`2&lt;String,String&gt; value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.AllInstances.UserNameGet">
            <summary>设置 SmsInfo.get_UserName() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.AllInstances.UserNameSetString">
            <summary>设置 SmsInfo.set_UserName(String value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ShimSmsConfig">
            <summary>LoveBank.Common.Plugins.SmsInfo+SmsConfig 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ShimSmsConfig.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ShimSmsConfig.#ctor(LoveBank.Common.Plugins.SmsInfo.SmsConfig)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ShimSmsConfig.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ShimSmsConfig.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ShimSmsConfig.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ShimSmsConfig.Constructor">
            <summary>设置 SmsConfig.SmsConfig() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ShimSmsConfig.InputTypeGet">
            <summary>设置 SmsConfig.get_InputType() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ShimSmsConfig.InputTypeSetInt32">
            <summary>设置 SmsConfig.set_InputType(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ShimSmsConfig.ValueGet">
            <summary>设置 SmsConfig.get_Value() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ShimSmsConfig.ValueSetObject">
            <summary>设置 SmsConfig.set_Value(Object value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ShimSmsConfig.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ShimSmsConfig.AllInstances.InputTypeGet">
            <summary>设置 SmsConfig.get_InputType() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ShimSmsConfig.AllInstances.InputTypeSetInt32">
            <summary>设置 SmsConfig.set_InputType(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ShimSmsConfig.AllInstances.ValueGet">
            <summary>设置 SmsConfig.get_Value() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsInfo.ShimSmsConfig.AllInstances.ValueSetObject">
            <summary>设置 SmsConfig.set_Value(Object value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimSmsSendResult">
            <summary>LoveBank.Common.Plugins.SmsSendResult 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSmsSendResult.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSmsSendResult.#ctor(LoveBank.Common.Plugins.SmsSendResult)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSmsSendResult.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimSmsSendResult.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsSendResult.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsSendResult.ConstructorBooleanString">
            <summary>设置 SmsSendResult.SmsSendResult(Boolean isSuccess, String message) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsSendResult.IsSuccessGet">
            <summary>设置 SmsSendResult.get_IsSuccess() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsSendResult.IsSuccessSetBoolean">
            <summary>设置 SmsSendResult.set_IsSuccess(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsSendResult.MessageGet">
            <summary>设置 SmsSendResult.get_Message() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsSendResult.MessageSetString">
            <summary>设置 SmsSendResult.set_Message(String value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimSmsSendResult.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsSendResult.AllInstances.IsSuccessGet">
            <summary>设置 SmsSendResult.get_IsSuccess() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsSendResult.AllInstances.IsSuccessSetBoolean">
            <summary>设置 SmsSendResult.set_IsSuccess(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsSendResult.AllInstances.MessageGet">
            <summary>设置 SmsSendResult.get_Message() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimSmsSendResult.AllInstances.MessageSetString">
            <summary>设置 SmsSendResult.set_Message(String value) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimValidateImage">
            <summary>LoveBank.Common.Plugins.ValidateImage 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimValidateImage.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimValidateImage.#ctor(LoveBank.Common.Plugins.ValidateImage)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimValidateImage.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimValidateImage.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimValidateImage.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimValidateImage.Constructor">
            <summary>设置 ValidateImage.ValidateImage() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimValidateImage.CreateValidateCodeInt32">
            <summary>设置 ValidateImage.CreateValidateCode(Int32 length) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimValidateImage.CreateValidateGraphicString">
            <summary>设置 ValidateImage.CreateValidateGraphic(String validateCode) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimValidateImage.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimValidateImage.AllInstances.CreateValidateCodeInt32">
            <summary>设置 ValidateImage.CreateValidateCode(Int32 length) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimValidateImage.AllInstances.CreateValidateGraphicString">
            <summary>设置 ValidateImage.CreateValidateGraphic(String validateCode) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.ShimWaterImage">
            <summary>LoveBank.Common.Plugins.WaterImage 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimWaterImage.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimWaterImage.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.ShimWaterImage.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimWaterImage.AddWaterStringToImageImageStringStringInt32ColorSingleSingle">
            <summary>设置 WaterImage.AddWaterStringToImage(Image image, String addText, String fontFamily, Int32 fontSize, Color color, Single x, Single y) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.ShimWaterImage.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.StubAbstractPayment">
            <summary>LoveBank.Common.Plugins.AbstractPayment 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.CreateField(System.String,System.String)">
            <summary>设置 AbstractPayment.CreateField(String name, String strValue) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.CreateFieldStringString">
            <summary>设置 AbstractPayment.CreateField(String name, String strValue) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.CreateForm(System.String,System.String)">
            <summary>设置 AbstractPayment.CreateForm(String content, String action) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.CreateFormStringString">
            <summary>设置 AbstractPayment.CreateForm(String content, String action) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.GetDisplayHtml">
            <summary>设置 AbstractPayment.GetDisplayHtml() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.GetDisplayHtml01">
            <summary>设置 AbstractPayment.GetDisplayHtml() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.GetPaymentForm(LoveBank.Common.Plugins.PaymentOrder)">
            <summary>设置 AbstractPayment.GetPaymentForm(PaymentOrder order) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.GetPaymentFormPaymentOrder">
            <summary>设置 AbstractPayment.GetPaymentForm(PaymentOrder order) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.InitializeStub">
            <summary>初始化 type StubAbstractPayment 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.KeyGet">
            <summary>设置 AbstractPayment.get_Key() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.NameGet">
            <summary>设置 AbstractPayment.get_Name() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.OnFinished(LoveBank.Common.Plugins.PaymentOrder)">
            <summary>设置 AbstractPayment.OnFinished(PaymentOrder order) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.OnFinishedPaymentOrder">
            <summary>设置 AbstractPayment.OnFinished(PaymentOrder order) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.OnNotifyVerifyFaild(LoveBank.Common.Plugins.PaymentOrder)">
            <summary>设置 AbstractPayment.OnNotifyVerifyFaild(PaymentOrder order) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.OnNotifyVerifyFaildPaymentOrder">
            <summary>设置 AbstractPayment.OnNotifyVerifyFaild(PaymentOrder order) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.OnPayment(LoveBank.Common.Plugins.PaymentOrder)">
            <summary>设置 AbstractPayment.OnPayment(PaymentOrder order) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.OnPaymentPaymentOrder">
            <summary>设置 AbstractPayment.OnPayment(PaymentOrder order) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.SendRequest(LoveBank.Common.Plugins.PaymentOrder)">
            <summary>设置 AbstractPayment.SendRequest(PaymentOrder order) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.SendRequestPaymentOrder">
            <summary>设置 AbstractPayment.SendRequest(PaymentOrder order) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.SubmitPaymentForm(System.String)">
            <summary>设置 AbstractPayment.SubmitPaymentForm(String formContent) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.SubmitPaymentFormString">
            <summary>设置 AbstractPayment.SubmitPaymentForm(String formContent) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.VerifyNotify(System.Collections.Specialized.NameValueCollection)">
            <summary>设置 AbstractPayment.VerifyNotify(NameValueCollection form) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.VerifyNotify(System.Collections.Specialized.NameValueCollection,System.String@)">
            <summary>设置 AbstractPayment.VerifyNotify(NameValueCollection form, String&amp; returnContent) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.VerifyNotifyNameValueCollection">
            <summary>设置 AbstractPayment.VerifyNotify(NameValueCollection form) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.VerifyNotifyNameValueCollectionStringOut">
            <summary>设置 AbstractPayment.VerifyNotify(NameValueCollection form, String&amp; returnContent) 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.Key">
            <summary>设置 AbstractPayment.get_Key() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubAbstractPayment.Name">
            <summary>设置 AbstractPayment.get_Name() 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.StubCheckBoxGroup">
            <summary>LoveBank.Common.Plugins.CheckBoxGroup 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubCheckBoxGroup.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubCheckBoxGroup.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Dictionary`2.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubCheckBoxGroup.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Dictionary`2.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubCheckBoxGroup.InitializeStub">
            <summary>初始化 type StubCheckBoxGroup 的新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubCheckBoxGroup.OnDeserialization(System.Object)">
            <summary>设置 Dictionary`2.OnDeserialization(Object sender) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubCheckBoxGroup.OnDeserializationObject">
            <summary>设置 Dictionary`2.OnDeserialization(Object sender) 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubCheckBoxGroup.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubCheckBoxGroup.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubCheckBoxGroup.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.StubCheckBoxItem">
            <summary>LoveBank.Common.Plugins.CheckBoxItem 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubCheckBoxItem.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubCheckBoxItem.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubCheckBoxItem.InitializeStub">
            <summary>初始化 type StubCheckBoxItem 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubCheckBoxItem.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubCheckBoxItem.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubCheckBoxItem.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.StubILoginPlugins">
            <summary>LoveBank.Common.Plugins.ILoginPlugins 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubILoginPlugins.#ctor">
            <summary>初始化 type StubILoginPlugins 的新实例</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.StubIPayment">
            <summary>LoveBank.Common.Plugins.IPayment 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPayment.#ctor">
            <summary>初始化 type StubIPayment 的新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPayment.AttachBackingFieldToConfig">
            <summary>附加委托以将 StubIPayment.Config 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPayment.AttachBackingFieldToDescription">
            <summary>附加委托以将 StubIPayment.Description 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPayment.AttachBackingFieldToFeeAmount">
            <summary>附加委托以将 StubIPayment.FeeAmount 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPayment.AttachBackingFieldToFeeType">
            <summary>附加委托以将 StubIPayment.FeeType 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPayment.AttachBackingFieldToIsEffect">
            <summary>附加委托以将 StubIPayment.IsEffect 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPayment.AttachBackingFieldToLogo">
            <summary>附加委托以将 StubIPayment.Logo 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPayment.AttachBackingFieldToSort">
            <summary>附加委托以将 StubIPayment.Sort 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.ConfigGet">
            <summary>设置 IPayment.get_Config() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.ConfigSetIDictionaryOfStringPaymentConfig">
            <summary>设置 IPayment.set_Config(IDictionary`2&lt;String,PaymentConfig&gt; value) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.DescriptionGet">
            <summary>设置 IPayment.get_Description() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.DescriptionSetString">
            <summary>设置 IPayment.set_Description(String value) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.FeeAmountGet">
            <summary>设置 IPayment.get_FeeAmount() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.FeeAmountSetDecimal">
            <summary>设置 IPayment.set_FeeAmount(Decimal value) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.FeeTypeGet">
            <summary>设置 IPayment.get_FeeType() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.FeeTypeSetInt32">
            <summary>设置 IPayment.set_FeeType(Int32 value) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.GetDisplayHtml">
            <summary>设置 IPayment.GetDisplayHtml() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.GetPaymentFormPaymentOrder">
            <summary>设置 IPayment.GetPaymentForm(PaymentOrder order) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.IsEffectGet">
            <summary>设置 IPayment.get_IsEffect() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.IsEffectSetBoolean">
            <summary>设置 IPayment.set_IsEffect(Boolean value) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.KeyGet">
            <summary>设置 IPayment.get_Key() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.LogoGet">
            <summary>设置 IPayment.get_Logo() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.LogoSetString">
            <summary>设置 IPayment.set_Logo(String value) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPayment.lbc::LoveBank#Common#Plugins#IPayment#GetDisplayHtml">
            <summary>设置 IPayment.GetDisplayHtml() 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPayment.lbc::LoveBank#Common#Plugins#IPayment#GetPaymentForm(LoveBank.Common.Plugins.PaymentOrder)">
            <summary>设置 IPayment.GetPaymentForm(PaymentOrder order) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPayment.lbc::LoveBank#Common#Plugins#IPayment#SendRequest(LoveBank.Common.Plugins.PaymentOrder)">
            <summary>设置 IPayment.SendRequest(PaymentOrder order) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPayment.lbc::LoveBank#Common#Plugins#IPayment#VerifyNotify(System.Collections.Specialized.NameValueCollection)">
            <summary>设置 IPayment.VerifyNotify(NameValueCollection form) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPayment.lbc::LoveBank#Common#Plugins#IPayment#VerifyNotify(System.Collections.Specialized.NameValueCollection,System.String@)">
            <summary>设置 IPayment.VerifyNotify(NameValueCollection form, String&amp; returnContent) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.NameGet">
            <summary>设置 IPayment.get_Name() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.OnlinePalyGet">
            <summary>设置 IPayment.get_OnlinePaly() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.SendRequestPaymentOrder">
            <summary>设置 IPayment.SendRequest(PaymentOrder order) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.SortGet">
            <summary>设置 IPayment.get_Sort() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.SortSetInt32">
            <summary>设置 IPayment.set_Sort(Int32 value) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.VerifyNotifyNameValueCollection">
            <summary>设置 IPayment.VerifyNotify(NameValueCollection form) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPayment.VerifyNotifyNameValueCollectionStringOut">
            <summary>设置 IPayment.VerifyNotify(NameValueCollection form, String&amp; returnContent) 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubIPayment.lbc::LoveBank#Common#Plugins#IPayment#Config">
            <summary>设置 IPayment.get_Config() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubIPayment.lbc::LoveBank#Common#Plugins#IPayment#Description">
            <summary>设置 IPayment.get_Description() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubIPayment.lbc::LoveBank#Common#Plugins#IPayment#FeeAmount">
            <summary>设置 IPayment.get_FeeAmount() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubIPayment.lbc::LoveBank#Common#Plugins#IPayment#FeeType">
            <summary>设置 IPayment.get_FeeType() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubIPayment.lbc::LoveBank#Common#Plugins#IPayment#IsEffect">
            <summary>设置 IPayment.get_IsEffect() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubIPayment.lbc::LoveBank#Common#Plugins#IPayment#Key">
            <summary>设置 IPayment.get_Key() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubIPayment.lbc::LoveBank#Common#Plugins#IPayment#Logo">
            <summary>设置 IPayment.get_Logo() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubIPayment.lbc::LoveBank#Common#Plugins#IPayment#Name">
            <summary>设置 IPayment.get_Name() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubIPayment.lbc::LoveBank#Common#Plugins#IPayment#OnlinePaly">
            <summary>设置 IPayment.get_OnlinePaly() 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubIPayment.lbc::LoveBank#Common#Plugins#IPayment#Sort">
            <summary>设置 IPayment.get_Sort() 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.StubIPaymentInfo">
            <summary>LoveBank.Common.Plugins.IPaymentInfo 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPaymentInfo.#ctor">
            <summary>初始化 type StubIPaymentInfo 的新实例</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.StubIPlugins">
            <summary>LoveBank.Common.Plugins.IPlugins 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPlugins.#ctor">
            <summary>初始化 type StubIPlugins 的新实例</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.StubIPluginsService`1">
            <summary>LoveBank.Common.Plugins.IPluginsService`1 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPluginsService`1.#ctor">
            <summary>初始化 type StubIPluginsService 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPluginsService`1.GetPluginsStringObjectArray">
            <summary>设置 IPluginsService`1.GetPlugins(String key, Object[] para) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPluginsService`1.InstallPluginsString">
            <summary>设置 IPluginsService`1.InstallPlugins(String key) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPluginsService`1.lbc::LoveBank#Common#Plugins#IPluginsService{T}#GetPlugins(System.String,System.Object[])">
            <summary>设置 IPluginsService`1.GetPlugins(String key, Object[] para) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPluginsService`1.lbc::LoveBank#Common#Plugins#IPluginsService{T}#InstallPlugins(System.String)">
            <summary>设置 IPluginsService`1.InstallPlugins(String key) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPluginsService`1.lbc::LoveBank#Common#Plugins#IPluginsService{T}#ReadPlugins">
            <summary>设置 IPluginsService`1.ReadPlugins() 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubIPluginsService`1.lbc::LoveBank#Common#Plugins#IPluginsService{T}#UninstallPlugins(System.String)">
            <summary>设置 IPluginsService`1.UninstallPlugins(String key) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPluginsService`1.ReadPlugins">
            <summary>设置 IPluginsService`1.ReadPlugins() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubIPluginsService`1.UninstallPluginsString">
            <summary>设置 IPluginsService`1.UninstallPlugins(String key) 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.StubISmsPlugins">
            <summary>LoveBank.Common.Plugins.ISmsPlugins 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubISmsPlugins.#ctor">
            <summary>初始化 type StubISmsPlugins 的新实例</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubISmsPlugins.CheckFee">
            <summary>设置 ISmsPlugins.CheckFee() 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubISmsPlugins.GetSmsInfo">
            <summary>设置 ISmsPlugins.GetSmsInfo() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubISmsPlugins.lbc::LoveBank#Common#Plugins#ISmsPlugins#CheckFee">
            <summary>设置 ISmsPlugins.CheckFee() 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubISmsPlugins.lbc::LoveBank#Common#Plugins#ISmsPlugins#GetSmsInfo">
            <summary>设置 ISmsPlugins.GetSmsInfo() 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubISmsPlugins.lbc::LoveBank#Common#Plugins#ISmsPlugins#ModifyPwd(System.String,System.String)">
            <summary>设置 ISmsPlugins.ModifyPwd(String oldPwd, String newPwd) 的 存根</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubISmsPlugins.lbc::LoveBank#Common#Plugins#ISmsPlugins#SendSm(System.String,System.String)">
            <summary>设置 ISmsPlugins.SendSm(String phoneNo, String content) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubISmsPlugins.ModifyPwdStringString">
            <summary>设置 ISmsPlugins.ModifyPwd(String oldPwd, String newPwd) 的 stub</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubISmsPlugins.SendSmStringString">
            <summary>设置 ISmsPlugins.SendSm(String phoneNo, String content) 的 stub</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.StubPaymentConfig">
            <summary>LoveBank.Common.Plugins.PaymentConfig 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPaymentConfig.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPaymentConfig.#ctor(System.String,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPaymentConfig.#ctor(System.String,System.Int32,System.Object)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPaymentConfig.InitializeStub">
            <summary>初始化 type StubPaymentConfig 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubPaymentConfig.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubPaymentConfig.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubPaymentConfig.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.StubPaymentManager">
            <summary>LoveBank.Common.Plugins.PaymentManager 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPaymentManager.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPaymentManager.GetPlugins(System.String,System.Object[])">
            <summary>设置 PluginService`1.GetPlugins(String key, Object[] para) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubPaymentManager.GetPluginsStringObjectArray">
            <summary>设置 PluginService`1.GetPlugins(String key, Object[] para) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPaymentManager.InitializeStub">
            <summary>初始化 type StubPaymentManager 的新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPaymentManager.InstallPlugins(System.String)">
            <summary>设置 PaymentManager.InstallPlugins(String key) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubPaymentManager.InstallPluginsString">
            <summary>设置 PaymentManager.InstallPlugins(String key) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPaymentManager.LoadPlugins">
            <summary>设置 PluginService`1.LoadPlugins() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubPaymentManager.LoadPlugins01">
            <summary>设置 PluginService`1.LoadPlugins() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPaymentManager.ReadPlugins">
            <summary>设置 PluginService`1.ReadPlugins() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubPaymentManager.ReadPlugins01">
            <summary>设置 PluginService`1.ReadPlugins() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPaymentManager.UninstallPlugins(System.String)">
            <summary>设置 PaymentManager.UninstallPlugins(String key) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubPaymentManager.UninstallPluginsString">
            <summary>设置 PaymentManager.UninstallPlugins(String key) 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubPaymentManager.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubPaymentManager.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubPaymentManager.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.StubPaymentOrder">
            <summary>LoveBank.Common.Plugins.PaymentOrder 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPaymentOrder.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPaymentOrder.InitializeStub">
            <summary>初始化 type StubPaymentOrder 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubPaymentOrder.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubPaymentOrder.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubPaymentOrder.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.StubPluginService`1">
            <summary>LoveBank.Common.Plugins.PluginService`1 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPluginService`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPluginService`1.GetPlugins(System.String,System.Object[])">
            <summary>设置 PluginService`1.GetPlugins(String key, Object[] para) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubPluginService`1.GetPluginsStringObjectArray">
            <summary>设置 PluginService`1.GetPlugins(String key, Object[] para) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPluginService`1.InitializeStub">
            <summary>初始化 type StubPluginService 的新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPluginService`1.InstallPlugins(System.String)">
            <summary>设置 PluginService`1.InstallPlugins(String key) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubPluginService`1.InstallPluginsString">
            <summary>设置 PluginService`1.InstallPlugins(String key) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPluginService`1.LoadPlugins">
            <summary>设置 PluginService`1.LoadPlugins() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubPluginService`1.LoadPlugins01">
            <summary>设置 PluginService`1.LoadPlugins() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPluginService`1.ReadPlugins">
            <summary>设置 PluginService`1.ReadPlugins() 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubPluginService`1.ReadPlugins01">
            <summary>设置 PluginService`1.ReadPlugins() 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubPluginService`1.UninstallPlugins(System.String)">
            <summary>设置 PluginService`1.UninstallPlugins(String key) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubPluginService`1.UninstallPluginsString">
            <summary>设置 PluginService`1.UninstallPlugins(String key) 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubPluginService`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubPluginService`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubPluginService`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.StubSerializableDictionary`2">
            <summary>LoveBank.Common.Plugins.SerializableDictionary`2 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubSerializableDictionary`2.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubSerializableDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubSerializableDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Dictionary`2.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubSerializableDictionary`2.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Dictionary`2.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubSerializableDictionary`2.InitializeStub">
            <summary>初始化 type StubSerializableDictionary 的新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubSerializableDictionary`2.OnDeserialization(System.Object)">
            <summary>设置 Dictionary`2.OnDeserialization(Object sender) 的 存根</summary>
        </member>
        <member name="F:LoveBank.Common.Plugins.Fakes.StubSerializableDictionary`2.OnDeserializationObject">
            <summary>设置 Dictionary`2.OnDeserialization(Object sender) 的 stub</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubSerializableDictionary`2.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubSerializableDictionary`2.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubSerializableDictionary`2.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.StubSmsInfo">
            <summary>LoveBank.Common.Plugins.SmsInfo 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubSmsInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubSmsInfo.InitializeStub">
            <summary>初始化 type StubSmsInfo 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubSmsInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubSmsInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubSmsInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.StubSmsSendResult">
            <summary>LoveBank.Common.Plugins.SmsSendResult 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubSmsSendResult.#ctor(System.Boolean,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubSmsSendResult.InitializeStub">
            <summary>初始化 type StubSmsSendResult 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubSmsSendResult.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubSmsSendResult.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubSmsSendResult.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Common.Plugins.Fakes.StubValidateImage">
            <summary>LoveBank.Common.Plugins.ValidateImage 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubValidateImage.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Common.Plugins.Fakes.StubValidateImage.InitializeStub">
            <summary>初始化 type StubValidateImage 的新实例</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubValidateImage.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubValidateImage.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Common.Plugins.Fakes.StubValidateImage.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:LoveBank.Core.SerializerHelp.Fakes.ShimHelpSerializer">
            <summary>LoveBank.Core.SerializerHelp.HelpSerializer 的填充码类型</summary>
        </member>
        <member name="M:LoveBank.Core.SerializerHelp.Fakes.ShimHelpSerializer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LoveBank.Core.SerializerHelp.Fakes.ShimHelpSerializer.#ctor(LoveBank.Core.SerializerHelp.HelpSerializer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LoveBank.Core.SerializerHelp.Fakes.ShimHelpSerializer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LoveBank.Core.SerializerHelp.Fakes.ShimHelpSerializer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LoveBank.Core.SerializerHelp.Fakes.ShimHelpSerializer.DeserializeOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>设置 HelpSerializer.Deserialize(String xmlString) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Core.SerializerHelp.Fakes.ShimHelpSerializer.JSONDeserializeOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>设置 HelpSerializer.JSONDeserialize(String jsonString) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Core.SerializerHelp.Fakes.ShimHelpSerializer.JSONSerializeOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.String})">
            <summary>设置 HelpSerializer.JSONSerialize(!!0 obj) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Core.SerializerHelp.Fakes.ShimHelpSerializer.SerializeOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.String})">
            <summary>设置 HelpSerializer.Serialize(!!0 obj) 的 填充码</summary>
        </member>
        <member name="M:LoveBank.Core.SerializerHelp.Fakes.ShimHelpSerializer.SerializeOf1M0Encoding``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.Text.Encoding,System.String})">
            <summary>设置 HelpSerializer.Serialize(!!0 obj, Encoding encode) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Core.SerializerHelp.Fakes.ShimHelpSerializer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LoveBank.Core.SerializerHelp.Fakes.ShimHelpSerializer.Constructor">
            <summary>设置 HelpSerializer.HelpSerializer() 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Core.SerializerHelp.Fakes.ShimHelpSerializer.DeSerializeStringType">
            <summary>设置 HelpSerializer.DeSerialize(String xml, Type type) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Core.SerializerHelp.Fakes.ShimHelpSerializer.DeSerializeStringTypeEncoding">
            <summary>设置 HelpSerializer.DeSerialize(String xml, Type type, Encoding encode) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Core.SerializerHelp.Fakes.ShimHelpSerializer.SerializeObjectType">
            <summary>设置 HelpSerializer.Serialize(Object obj, Type type) 的 填充码</summary>
        </member>
        <member name="P:LoveBank.Core.SerializerHelp.Fakes.ShimHelpSerializer.SerializeObjectTypeEncoding">
            <summary>设置 HelpSerializer.Serialize(Object obj, Type type, Encoding encode) 的 填充码</summary>
        </member>
        <member name="T:LoveBank.Core.SerializerHelp.Fakes.ShimHelpSerializer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:LoveBank.Core.SerializerHelp.Fakes.StubHelpSerializer">
            <summary>LoveBank.Core.SerializerHelp.HelpSerializer 的存根类型</summary>
        </member>
        <member name="M:LoveBank.Core.SerializerHelp.Fakes.StubHelpSerializer.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LoveBank.Core.SerializerHelp.Fakes.StubHelpSerializer.InitializeStub">
            <summary>初始化 type StubHelpSerializer 的新实例</summary>
        </member>
        <member name="P:LoveBank.Core.SerializerHelp.Fakes.StubHelpSerializer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LoveBank.Core.SerializerHelp.Fakes.StubHelpSerializer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LoveBank.Core.SerializerHelp.Fakes.StubHelpSerializer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Delegates.LoveBankCommonDelegates">
            <summary>包含用于 LoveBank.Common 的存根和填充码的自定义委托</summary>
        </member>
        <member name="T:System.Linq.Dynamic.Fakes.ShimDynamicClass">
            <summary>System.Linq.Dynamic.DynamicClass 的填充码类型</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimDynamicClass.#ctor(System.Linq.Dynamic.DynamicClass)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimDynamicClass.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimDynamicClass.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicClass.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicClass.Constructor">
            <summary>设置 DynamicClass.DynamicClass() 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicClass.ToString">
            <summary>设置 DynamicClass.ToString() 的 填充码</summary>
        </member>
        <member name="T:System.Linq.Dynamic.Fakes.ShimDynamicClass.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicClass.AllInstances.ToString01">
            <summary>设置 DynamicClass.ToString() 的 填充码</summary>
        </member>
        <member name="T:System.Linq.Dynamic.Fakes.ShimDynamicExpression">
            <summary>System.Linq.Dynamic.DynamicExpression 的填充码类型</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimDynamicExpression.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimDynamicExpression.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimDynamicExpression.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimDynamicExpression.ParseLambdaOf2StringObjectArray``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Object[],System.Linq.Expressions.Expression{System.Func{``0,``1}}})">
            <summary>设置 DynamicExpression.ParseLambda(String expression, Object[] values) 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicExpression.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicExpression.CreateClassDynamicPropertyArray">
            <summary>设置 DynamicExpression.CreateClass(DynamicProperty[] properties) 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicExpression.CreateClassIEnumerableOfDynamicProperty">
            <summary>设置 DynamicExpression.CreateClass(IEnumerable`1&lt;DynamicProperty&gt; properties) 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicExpression.ParseLambdaParameterExpressionArrayTypeStringObjectArray">
            <summary>设置 DynamicExpression.ParseLambda(ParameterExpression[] parameters, Type resultType, String expression, Object[] values) 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicExpression.ParseLambdaTypeTypeStringObjectArray">
            <summary>设置 DynamicExpression.ParseLambda(Type itType, Type resultType, String expression, Object[] values) 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicExpression.ParseTypeStringObjectArray">
            <summary>设置 DynamicExpression.Parse(Type resultType, String expression, Object[] values) 的 填充码</summary>
        </member>
        <member name="T:System.Linq.Dynamic.Fakes.ShimDynamicProperty">
            <summary>System.Linq.Dynamic.DynamicProperty 的填充码类型</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimDynamicProperty.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimDynamicProperty.#ctor(System.Linq.Dynamic.DynamicProperty)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimDynamicProperty.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimDynamicProperty.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicProperty.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicProperty.ConstructorStringType">
            <summary>设置 DynamicProperty.DynamicProperty(String name, Type type) 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicProperty.NameGet">
            <summary>设置 DynamicProperty.get_Name() 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicProperty.TypeGet">
            <summary>设置 DynamicProperty.get_Type() 的 填充码</summary>
        </member>
        <member name="T:System.Linq.Dynamic.Fakes.ShimDynamicProperty.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicProperty.AllInstances.NameGet">
            <summary>设置 DynamicProperty.get_Name() 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicProperty.AllInstances.TypeGet">
            <summary>设置 DynamicProperty.get_Type() 的 填充码</summary>
        </member>
        <member name="T:System.Linq.Dynamic.Fakes.ShimDynamicQueryable">
            <summary>System.Linq.Dynamic.DynamicQueryable 的填充码类型</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimDynamicQueryable.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimDynamicQueryable.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimDynamicQueryable.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimDynamicQueryable.OrderByOf1IQueryableOfM0StringObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.IQueryable{``0},System.String,System.Object[],System.Linq.IQueryable{``0}})">
            <summary>设置 DynamicQueryable.OrderBy(IQueryable`1&lt;!!0&gt; source, String ordering, Object[] values) 的 填充码</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimDynamicQueryable.WhereOf1IQueryableOfM0StringObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.IQueryable{``0},System.String,System.Object[],System.Linq.IQueryable{``0}})">
            <summary>设置 DynamicQueryable.Where(IQueryable`1&lt;!!0&gt; source, String predicate, Object[] values) 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicQueryable.AnyIQueryable">
            <summary>设置 DynamicQueryable.Any(IQueryable source) 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicQueryable.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicQueryable.CountIQueryable">
            <summary>设置 DynamicQueryable.Count(IQueryable source) 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicQueryable.GroupByIQueryableStringStringObjectArray">
            <summary>设置 DynamicQueryable.GroupBy(IQueryable source, String keySelector, String elementSelector, Object[] values) 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicQueryable.OrderByIQueryableStringObjectArray">
            <summary>设置 DynamicQueryable.OrderBy(IQueryable source, String ordering, Object[] values) 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicQueryable.SelectIQueryableStringObjectArray">
            <summary>设置 DynamicQueryable.Select(IQueryable source, String selector, Object[] values) 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicQueryable.SkipIQueryableInt32">
            <summary>设置 DynamicQueryable.Skip(IQueryable source, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicQueryable.TakeIQueryableInt32">
            <summary>设置 DynamicQueryable.Take(IQueryable source, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimDynamicQueryable.WhereIQueryableStringObjectArray">
            <summary>设置 DynamicQueryable.Where(IQueryable source, String predicate, Object[] values) 的 填充码</summary>
        </member>
        <member name="T:System.Linq.Dynamic.Fakes.ShimParseException">
            <summary>System.Linq.Dynamic.ParseException 的填充码类型</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimParseException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimParseException.#ctor(System.Linq.Dynamic.ParseException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimParseException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimParseException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.ShimParseException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimParseException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimParseException.ConstructorStringInt32">
            <summary>设置 ParseException.ParseException(String message, Int32 position) 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimParseException.PositionGet">
            <summary>设置 ParseException.get_Position() 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimParseException.ToString">
            <summary>设置 ParseException.ToString() 的 填充码</summary>
        </member>
        <member name="T:System.Linq.Dynamic.Fakes.ShimParseException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimParseException.AllInstances.PositionGet">
            <summary>设置 ParseException.get_Position() 的 填充码</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.ShimParseException.AllInstances.ToString01">
            <summary>设置 ParseException.ToString() 的 填充码</summary>
        </member>
        <member name="T:System.Linq.Dynamic.Fakes.StubDynamicClass">
            <summary>System.Linq.Dynamic.DynamicClass 的存根类型</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.StubDynamicClass.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.StubDynamicClass.InitializeStub">
            <summary>初始化 type StubDynamicClass 的新实例</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.StubDynamicClass.ToString">
            <summary>设置 DynamicClass.ToString() 的 存根</summary>
        </member>
        <member name="F:System.Linq.Dynamic.Fakes.StubDynamicClass.ToString01">
            <summary>设置 DynamicClass.ToString() 的 stub</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.StubDynamicClass.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.StubDynamicClass.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.StubDynamicClass.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:System.Linq.Dynamic.Fakes.StubDynamicProperty">
            <summary>System.Linq.Dynamic.DynamicProperty 的存根类型</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.StubDynamicProperty.#ctor(System.String,System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:System.Linq.Dynamic.Fakes.StubDynamicProperty.InitializeStub">
            <summary>初始化 type StubDynamicProperty 的新实例</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.StubDynamicProperty.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.StubDynamicProperty.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:System.Linq.Dynamic.Fakes.StubDynamicProperty.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
    </members>
</doc>
